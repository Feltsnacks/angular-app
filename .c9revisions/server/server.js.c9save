{"ts":1380226937863,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var fs = require('fs');\nvar http = require('http');\nvar https = require('https');\nvar privateKey  = fs.readFileSync(__dirname + '/cert/privatekey.pem').toString();\nvar certificate = fs.readFileSync(__dirname + '/cert/certificate.pem').toString();\nvar credentials = {key: privateKey, cert: certificate};\n\nvar express = require('express');\nvar mongoProxy = require('./lib/mongo-proxy');\nvar config = require('./config.js');\nvar passport = require('passport');\nvar security = require('./lib/security');\nvar xsrf = require('./lib/xsrf');\nvar protectJSON = require('./lib/protectJSON');\nrequire('express-namespace');\n\nvar app = express();\nvar secureServer = https.createServer(credentials, app);\nvar server = http.createServer(app);\n\nrequire('./lib/routes/static').addRoutes(app, config);\n\napp.use(protectJSON);\n\napp.use(express.logger());                                  // Log requests to the console\napp.use(express.bodyParser());                              // Extract the data from the body of the request - this is needed by the LocalStrategy authenticate method\napp.use(express.cookieParser(config.server.cookieSecret));  // Hash cookies with this secret\napp.use(express.cookieSession());                           // Store the session in the (secret) cookie\napp.use(passport.initialize());                             // Initialize PassportJS\napp.use(passport.session());                                // Use Passport's session authentication strategy - this stores the logged in user in the session and will now run on any request\napp.use(xsrf);                                            // Add XSRF checks to the request\nsecurity.initialize(config.mongo.dbUrl, config.mongo.apiKey, config.security.dbName, config.security.usersCollection); // Add a Mongo strategy for handling the authentication\n\napp.use(function(req, res, next) {\n  if ( req.user ) {\n    console.log('Current User:', req.user.firstName, req.user.lastName);\n  } else {\n    console.log('Unauthenticated');\n  }\n  next();\n});\n\napp.namespace('/databases/:db/collections/:collection*', function() {\n  app.all('/', function(req, res, next) {\n    if ( req.method !== 'GET' ) {\n      // We require the user is authenticated to modify any collections\n      security.authenticationRequired(req, res, next);\n    } else {\n      next();\n    }\n  });\n  app.all('/', function(req, res, next) {\n    if ( req.method !== 'GET' && (req.params.collection === 'users' || req.params.collection === 'projects') ) {\n      // We require the current user to be admin to modify the users or projects collection\n      return security.adminRequired(req, res, next);\n    }\n    next();\n  });\n  // Proxy database calls to the MongoDB\n  app.all('/', mongoProxy(config.mongo.dbUrl, config.mongo.apiKey));\n});\n\nrequire('./lib/routes/security').addRoutes(app, security);\nrequire('./lib/routes/appFile').addRoutes(app, config);\n\n// A standard error handler - it picks up any left over errors and returns a nicely formatted server 500 error\napp.use(express.errorHandler({ dumpExceptions: true, showStack: true }));\n\n// Start up the server on the port specified in the config\nserver.listen(config.server.listenPort, 'localhost', 511, function() {\n  // // Once the server is listening we automatically open up a browser\n  var open = require('open');\n  open('http://localhost:' + config.server.listenPort + '/');\n});\nconsole.log('Angular App Server - listening on port: ' + config.server.listenPort);\nsecureServer.listen(config.server.securePort);\nconsole.log('Angular App Server - listening on secure port: ' + config.server.securePort);\n"]],"start1":0,"start2":0,"length1":0,"length2":3573}]],"length":3573}
{"contributors":[],"silentsave":false,"ts":1380229446328,"patch":[[{"diffs":[[0,"rt, "],[-1,"'localhost'"],[1,"process.env.IP"],[0,", 51"]],"start1":3148,"start2":3148,"length1":19,"length2":22}]],"length":3576,"saved":false}
{"ts":1380229558206,"patch":[[{"diffs":[[0,"p://"],[-1,"localhost"],[1,"' process.env.IP + '"],[0,":' +"]],"start1":3299,"start2":3299,"length1":17,"length2":28}]],"length":3587,"saved":false}
{"ts":1380229625361,"patch":[[{"diffs":[[0,"http://'"],[1," +"],[0," process"]],"start1":3296,"start2":3296,"length1":16,"length2":18}]],"length":3589,"saved":false}
