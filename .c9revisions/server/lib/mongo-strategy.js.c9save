{"ts":1380230698774,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"var util = require('util');\nvar passport = require('passport');\nvar LocalStrategy = require('passport-local').Strategy;\nvar rest = require('request');\n\nfunction MongoDBStrategy(dbUrl, apiKey, dbName, collection) {\n  this.dbUrl = dbUrl;\n  this.apiKey = apiKey;\n  this.dbName = dbName;\n  this.collection = collection;\n  this.baseUrl = this.dbUrl + '/databases/' + this.dbName + '/collections/' + collection + '/';\n\n  // Call the super constructor - passing in our user verification function\n  // We use the email field for the username\n  LocalStrategy.call(this, { usernameField: 'email' }, this.verifyUser.bind(this));\n\n  // Serialize the user into a string (id) for storing in the session\n  passport.serializeUser(function(user, done) {\n    done(null, user._id.$oid); // Remember that MongoDB has this weird { _id: { $oid: 1234567 } } structure\n  });\n\n  // Deserialize the user from a string (id) into a user (via a cll to the DB)\n  passport.deserializeUser(this.get.bind(this));\n\n  // We want this strategy to have a nice name for use by passport, e.g. app.post('/login', passport.authenticate('mongo'));\n  this.name = MongoDBStrategy.name;\n}\n\n// MongoDBStrategy inherits from LocalStrategy\nutil.inherits(MongoDBStrategy, LocalStrategy);\n\nMongoDBStrategy.name = \"mongo\";\n\n// Query the users collection\nMongoDBStrategy.prototype.query = function(query, done) {\n  query.apiKey = this.apiKey;     // Add the apiKey to the passed in query\n  var request = rest.get(this.baseUrl, { qs: query, json: {} }, function(err, response, body) {\n    done(err, body);\n  });\n};\n\n// Get a user by id\nMongoDBStrategy.prototype.get = function(id, done) {\n  var query = { apiKey: this.apiKey };\n  var request = rest.get(this.baseUrl + id, { qs: query, json: {} }, function(err, response, body) {\n    done(err, body);\n  });\n};\n\n// Find a user by their email\nMongoDBStrategy.prototype.findByEmail = function(email, done) {\n  this.query({ q: JSON.stringify({email: email}) }, function(err, result) {\n    if ( result && result.length === 1 ) {\n      return done(err, result[0]);\n    }\n    done(err, null);\n  });\n};\n\n// Check whether the user passed in is a valid one\nMongoDBStrategy.prototype.verifyUser = function(email, password, done) {\n  this.findByEmail(email, function(err, user) {\n    if (!err && user) {\n      if (user.password !== password) {\n        user = null;\n      }\n    }\n    done(err, user);\n  });\n};\n\nmodule.exports = MongoDBStrategy;\n\n// TODO: Store hashes rather than passwords... node-bcrypt requires python to be installed :-(\n/*var bcrypt = require('bcrypt');\nfunction hashPassword(password) {\n  return bcrypt.hashSync(password, bcrypt.genSaltSync());\n}\n\nfunction checkPassword(password, hash) {\n  return bcrypt.compareSync(password, hash);\n}\n*/"]],"start1":0,"start2":0,"length1":0,"length2":2743}]],"length":2743}
