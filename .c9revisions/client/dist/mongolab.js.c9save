{"ts":1380231399542,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"angular.module('mongolabResource', []).factory('mongolabResource', ['MONGOLAB_CONFIG','$http', '$q', function (MONGOLAB_CONFIG, $http, $q) {\n\n  function MongolabResourceFactory(collectionName) {\n\n    var url = MONGOLAB_CONFIG.baseUrl + MONGOLAB_CONFIG.dbName + '/collections/' + collectionName;\n    var defaultParams = {};\n    if (MONGOLAB_CONFIG.apiKey) {\n      defaultParams.apiKey = MONGOLAB_CONFIG.apiKey;\n    }\n    \n    var thenFactoryMethod = function (httpPromise, successcb, errorcb, isArray) {\n      var scb = successcb || angular.noop;\n      var ecb = errorcb || angular.noop;\n\n      return httpPromise.then(function (response) {\n        var result;\n        if (isArray) {\n          result = [];\n          for (var i = 0; i < response.data.length; i++) {\n            result.push(new Resource(response.data[i]));\n          }\n        } else {\n          //MongoLab has rather peculiar way of reporting not-found items, I would expect 404 HTTP response status...\n          if (response.data === \" null \"){\n            return $q.reject({\n              code:'resource.notfound',\n              collection:collectionName\n            });\n          } else {\n            result = new Resource(response.data);\n          }\n        }\n        scb(result, response.status, response.headers, response.config);\n        return result;\n      }, function (response) {\n        ecb(undefined, response.status, response.headers, response.config);\n        return undefined;\n      });\n    };\n\n    var Resource = function (data) {\n      angular.extend(this, data);\n    };\n\n    Resource.all = function (cb, errorcb) {\n      return Resource.query({}, cb, errorcb);\n    };\n\n    Resource.query = function (queryJson, successcb, errorcb) {\n      var params = angular.isObject(queryJson) ? {q:JSON.stringify(queryJson)} : {};\n      var httpPromise = $http.get(url, {params:angular.extend({}, defaultParams, params)});\n      return thenFactoryMethod(httpPromise, successcb, errorcb, true);\n    };\n\n    Resource.getById = function (id, successcb, errorcb) {\n      var httpPromise = $http.get(url + '/' + id, {params:defaultParams});\n      return thenFactoryMethod(httpPromise, successcb, errorcb);\n    };\n\n    Resource.getByIds = function (ids, successcb, errorcb) {\n      var qin = [];\n      angular.forEach(ids, function (id) {\n         qin.push({$oid: id});\n      });\n      return Resource.query({_id:{$in:qin}}, successcb, errorcb);\n    };\n\n    //instance methods\n\n    Resource.prototype.$id = function () {\n      if (this._id && this._id.$oid) {\n        return this._id.$oid;\n      }\n    };\n\n    Resource.prototype.$save = function (successcb, errorcb) {\n      var httpPromise = $http.post(url, this, {params:defaultParams});\n      return thenFactoryMethod(httpPromise, successcb, errorcb);\n    };\n\n    Resource.prototype.$update = function (successcb, errorcb) {\n      var httpPromise = $http.put(url + \"/\" + this.$id(), angular.extend({}, this, {_id:undefined}), {params:defaultParams});\n      return thenFactoryMethod(httpPromise, successcb, errorcb);\n    };\n\n    Resource.prototype.$remove = function (successcb, errorcb) {\n      var httpPromise = $http['delete'](url + \"/\" + this.$id(), {params:defaultParams});\n      return thenFactoryMethod(httpPromise, successcb, errorcb);\n    };\n\n    Resource.prototype.$saveOrUpdate = function (savecb, updatecb, errorSavecb, errorUpdatecb) {\n      if (this.$id()) {\n        return this.$update(updatecb, errorUpdatecb);\n      } else {\n        return this.$save(savecb, errorSavecb);\n      }\n    };\n\n    return Resource;\n  }\n  return MongolabResourceFactory;\n}]);\n"]],"start1":0,"start2":0,"length1":0,"length2":3588}]],"length":3588}
