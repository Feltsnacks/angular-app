{"ts":1380231300487,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/*! angular-app - v0.0.1-SNAPSHOT - 2013-09-26\n * https://github.com/angular-app/angular-app\n * Copyright (c) 2013 Pawel Kozlowski & Peter Bacon Darwin;\n * Licensed MIT\n */\nangular.module('admin', ['admin-projects', 'admin-users']);\n\nangular.module('admin-projects', [\n  'resources.projects',\n  'resources.users',\n  'services.crud',\n  'security.authorization'\n])\n\n.config(['crudRouteProvider', 'securityAuthorizationProvider', function (crudRouteProvider, securityAuthorizationProvider) {\n\n  var getAllUsers = ['Projects', 'Users', '$route', function(Projects, Users, $route){\n    return Users.all();\n  }];\n\n  crudRouteProvider.routesFor('Projects', 'admin')\n    .whenList({\n      projects: ['Projects', function(Projects) { return Projects.all(); }],\n      adminUser: securityAuthorizationProvider.requireAdminUser\n    })\n    .whenNew({\n      project: ['Projects', function(Projects) { return new Projects(); }],\n      users: getAllUsers,\n      adminUser: securityAuthorizationProvider.requireAdminUser\n    })\n    .whenEdit({\n      project: ['Projects', 'Users', '$route', function(Projects, Users, $route) { return Projects.getById($route.current.params.itemId); }],\n      users: getAllUsers,\n      adminUser: securityAuthorizationProvider.requireAdminUser\n    });\n}])\n\n.controller('ProjectsListCtrl', ['$scope', 'crudListMethods', 'projects', function($scope, crudListMethods, projects) {\n  $scope.projects = projects;\n\n  angular.extend($scope, crudListMethods('/admin/projects'));\n}])\n\n.controller('ProjectsEditCtrl', ['$scope', '$location', 'i18nNotifications', 'users', 'project', function($scope, $location, i18nNotifications, users, project) {\n\n  $scope.project = project;\n  $scope.users = users;\n\n  $scope.onSave = function(project) {\n    i18nNotifications.pushForNextRoute('crud.project.save.success', 'success', {id : project.$id()});\n    $location.path('/admin/projects');\n  };\n\n  $scope.onError = function() {\n    i18nNotifications.pushForCurrentRoute('crud.project.save.error', 'error');\n  };\n\n}])\n\n.controller('TeamMembersController', ['$scope', function($scope) {\n  $scope.project.teamMembers = $scope.project.teamMembers || [];\n\n  //prepare users lookup, just keep references for easier lookup\n  $scope.usersLookup = {};\n  angular.forEach($scope.users, function(value, key) {\n    $scope.usersLookup[value.$id()] = value;\n  });\n\n  $scope.productOwnerCandidates = function() {\n    return $scope.users.filter(function(user) {\n      return $scope.usersLookup[user.$id()] && $scope.project.canActAsProductOwner(user.$id());\n    });\n  };\n\n  $scope.scrumMasterCandidates = function() {\n    return $scope.users.filter(function(user) {\n      return $scope.usersLookup[user.$id()] && $scope.project.canActAsScrumMaster(user.$id());\n    });\n  };\n\n  $scope.teamMemberCandidates = function() {\n    return $scope.users.filter(function(user) {\n      return $scope.usersLookup[user.$id()] && $scope.project.canActAsDevTeamMember(user.$id()) && !$scope.project.isDevTeamMember(user.$id());\n    });\n  };\n\n  $scope.selTeamMember = undefined;\n\n  $scope.addTeamMember = function() {\n    if($scope.selTeamMember) {\n      $scope.project.teamMembers.push($scope.selTeamMember);\n      $scope.selTeamMember = undefined;\n    }\n  };\n\n  $scope.removeTeamMember = function(teamMember) {\n    var idx = $scope.project.teamMembers.indexOf(teamMember);\n    if(idx >= 0) {\n      $scope.project.teamMembers.splice(idx, 1);\n    }\n    // If we have removed the team member that is currently selected then clear this object\n    if($scope.selTeamMember === teamMember) {\n      $scope.selTeamMember = undefined;\n    }\n  };\n}]);\nangular.module('admin-users-edit',['services.crud', 'services.i18nNotifications', 'resources.users'])\n\n.controller('UsersEditCtrl', ['$scope', '$location', 'i18nNotifications', 'user', function ($scope, $location, i18nNotifications, user) {\n\n  $scope.user = user;\n  $scope.password = user.password;\n\n  $scope.onSave = function (user) {\n    i18nNotifications.pushForNextRoute('crud.user.save.success', 'success', {id : user.$id()});\n    $location.path('/admin/users');\n  };\n\n  $scope.onError = function() {\n    i18nNotifications.pushForCurrentRoute('crud.user.save.error', 'error');\n  };\n\n  $scope.onRemove = function(user) {\n    i18nNotifications.pushForNextRoute('crud.user.remove.success', 'success', {id : user.$id()});\n    $location.path('/admin/users');\n  };\n\n}])\n\n/**\n * A validation directive to ensure that the model contains a unique email address\n * @param  Users service to provide access to the server's user database\n  */\n.directive('uniqueEmail', [\"Users\", function (Users) {\n  return {\n    require:'ngModel',\n    restrict:'A',\n    link:function (scope, el, attrs, ctrl) {\n\n      //TODO: We need to check that the value is different to the original\n      \n      //using push() here to run it as the last parser, after we are sure that other validators were run\n      ctrl.$parsers.push(function (viewValue) {\n\n        if (viewValue) {\n          Users.query({email:viewValue}, function (users) {\n            if (users.length === 0) {\n              ctrl.$setValidity('uniqueEmail', true);\n            } else {\n              ctrl.$setValidity('uniqueEmail', false);\n            }\n          });\n          return viewValue;\n        }\n      });\n    }\n  };\n}])\n\n/**\n * A validation directive to ensure that this model has the same value as some other\n */\n.directive('validateEquals', function() {\n  return {\n    restrict: 'A',\n    require: 'ngModel',\n    link: function(scope, elm, attrs, ctrl) {\n\n      function validateEqual(myValue, otherValue) {\n        if (myValue === otherValue) {\n          ctrl.$setValidity('equal', true);\n          return myValue;\n        } else {\n          ctrl.$setValidity('equal', false);\n          return undefined;\n        }\n      }\n\n      scope.$watch(attrs.validateEquals, function(otherModelValue) {\n        ctrl.$setValidity('equal', ctrl.$viewValue === otherModelValue);\n      });\n\n      ctrl.$parsers.push(function(viewValue) {\n        return validateEqual(viewValue, scope.$eval(attrs.validateEquals));\n      });\n\n      ctrl.$formatters.push(function(modelValue) {\n        return validateEqual(modelValue, scope.$eval(attrs.validateEquals));\n      });\n    }\n  };\n});\nangular.module('admin-users', ['admin-users-edit', 'services.crud', 'security.authorization', 'services.i18nNotifications', 'directives.gravatar'])\n\n.config(['crudRouteProvider', 'securityAuthorizationProvider', function (crudRouteProvider, securityAuthorizationProvider) {\n\n  crudRouteProvider.routesFor('Users', 'admin')\n    .whenList({\n      users: ['Users', function(Users) { return Users.all(); }],\n      currentUser: securityAuthorizationProvider.requireAdminUser\n    })\n    .whenNew({\n      user: ['Users', function(Users) { return new Users(); }],\n      currentUser: securityAuthorizationProvider.requireAdminUser\n    })\n    .whenEdit({\n      user:['$route', 'Users', function ($route, Users) {\n        return Users.getById($route.current.params.itemId);\n      }],\n      currentUser: securityAuthorizationProvider.requireAdminUser\n    });\n}])\n\n.controller('UsersListCtrl', ['$scope', 'crudListMethods', 'users', 'i18nNotifications', function ($scope, crudListMethods, users, i18nNotifications) {\n  $scope.users = users;\n\n  angular.extend($scope, crudListMethods('/admin/users'));\n\n  $scope.remove = function(user, $index, $event) {\n    // Don't let the click bubble up to the ng-click on the enclosing div, which will try to trigger\n    // an edit of this item.\n    $event.stopPropagation();\n\n    // Remove this user\n    user.$remove(function() {\n      // It is gone from the DB so we can remove it from the local list too\n      $scope.users.splice($index,1);\n      i18nNotifications.pushForCurrentRoute('crud.user.remove.success', 'success', {id : user.$id()});\n    }, function() {\n      i18nNotifications.pushForCurrentRoute('crud.user.remove.error', 'error', {id : user.$id()});\n    });\n  };\n}]);\nangular.module('app', [\n  'ngRoute',\n  'projectsinfo',\n  'dashboard',\n  'projects',\n  'admin',\n  'services.breadcrumbs',\n  'services.i18nNotifications',\n  'services.httpRequestTracker',\n  'security',\n  'directives.crud',\n  'templates.app',\n  'templates.common']);\n\nangular.module('app').constant('MONGOLAB_CONFIG', {\n  baseUrl: '/databases/',\n  dbName: 'meteormongodb'\n});\n\n//TODO: move those messages to a separate module\nangular.module('app').constant('I18N.MESSAGES', {\n  'errors.route.changeError':'Route change error',\n  'crud.user.save.success':\"A user with id '{{id}}' was saved successfully.\",\n  'crud.user.remove.success':\"A user with id '{{id}}' was removed successfully.\",\n  'crud.user.remove.error':\"Something went wrong when removing user with id '{{id}}'.\",\n  'crud.user.save.error':\"Something went wrong when saving a user...\",\n  'crud.project.save.success':\"A project with id '{{id}}' was saved successfully.\",\n  'crud.project.remove.success':\"A project with id '{{id}}' was removed successfully.\",\n  'crud.project.save.error':\"Something went wrong when saving a project...\",\n  'login.reason.notAuthorized':\"You do not have the necessary access permissions.  Do you want to login as someone else?\",\n  'login.reason.notAuthenticated':\"You must be logged in to access this part of the application.\",\n  'login.error.invalidCredentials': \"Login failed.  Please check your credentials and try again.\",\n  'login.error.serverError': \"There was a problem with authenticating: {{exception}}.\"\n});\n\nangular.module('app').config(['$routeProvider', '$locationProvider', function ($routeProvider, $locationProvider) {\n  $locationProvider.html5Mode(true);\n  $routeProvider.otherwise({redirectTo:'/projectsinfo'});\n}]);\n\nangular.module('app').run(['security', function(security) {\n  // Get the current user when the application starts\n  // (in case they are still logged in from a previous session)\n  security.requestCurrentUser();\n}]);\n\nangular.module('app').controller('AppCtrl', ['$scope', 'i18nNotifications', 'localizedMessages', function($scope, i18nNotifications) {\n\n  $scope.notifications = i18nNotifications;\n\n  $scope.removeNotification = function (notification) {\n    i18nNotifications.remove(notification);\n  };\n\n  $scope.$on('$routeChangeError', function(event, current, previous, rejection){\n    i18nNotifications.pushForCurrentRoute('errors.route.changeError', 'error', {}, {rejection: rejection});\n  });\n}]);\n\nangular.module('app').controller('HeaderCtrl', ['$scope', '$location', '$route', 'security', 'breadcrumbs', 'notifications', 'httpRequestTracker',\n  function ($scope, $location, $route, security, breadcrumbs, notifications, httpRequestTracker) {\n  $scope.location = $location;\n  $scope.breadcrumbs = breadcrumbs;\n\n  $scope.isAuthenticated = security.isAuthenticated;\n  $scope.isAdmin = security.isAdmin;\n\n  $scope.home = function () {\n    if (security.isAuthenticated()) {\n      $location.path('/dashboard');\n    } else {\n      $location.path('/projectsinfo');\n    }\n  };\n\n  $scope.isNavbarActive = function (navBarPath) {\n    return navBarPath === breadcrumbs.getFirst().name;\n  };\n\n  $scope.hasPendingRequests = function () {\n    return httpRequestTracker.hasPendingRequests();\n  };\n}]);\n\nangular.module('dashboard', ['resources.projects', 'resources.tasks'])\n\n.config(['$routeProvider', function ($routeProvider) {\n  $routeProvider.when('/dashboard', {\n    templateUrl:'dashboard/dashboard.tpl.html',\n    controller:'DashboardCtrl',\n    resolve:{\n      projects:['Projects', function (Projects) {\n        //TODO: need to know the current user here\n        return Projects.all();\n      }],\n      tasks:['Tasks', function (Tasks) {\n        //TODO: need to know the current user here\n        return Tasks.all();\n      }]\n    }\n  });\n}])\n\n.controller('DashboardCtrl', ['$scope', '$location', 'projects', 'tasks', function ($scope, $location, projects, tasks) {\n  $scope.projects = projects;\n  $scope.tasks = tasks;\n\n  $scope.manageBacklog = function (projectId) {\n    $location.path('/projects/' + projectId + '/productbacklog');\n  };\n\n  $scope.manageSprints = function (projectId) {\n    $location.path('/projects/' + projectId + '/sprints');\n  };\n}]);\nangular.module('productbacklog', ['resources.productbacklog', 'services.crud'])\n\n  .config(['crudRouteProvider', function(crudRouteProvider){\n  \n  \n    // projectId is a helper method wrapped with DI annotation that will be used in\n    // route resolves in this file.\n    var projectId = ['$route', function($route) {\n      return $route.current.params.projectId;\n    }];\n  \n  \n    // Create the CRUD routes for editing the product backlog\n    crudRouteProvider.routesFor('ProductBacklog', 'projects', 'projects/:projectId')\n      // How to handle the \"list product backlog items\" route\n      .whenList({\n        projectId: projectId,\n        backlog : ['$route', 'ProductBacklog', function($route, ProductBacklog){\n          return ProductBacklog.forProject($route.current.params.projectId);\n        }]\n      })\n      \n      // How to handle the \"create a new product backlog item\" route\n      .whenNew({\n        projectId: projectId,\n        backlogItem : ['$route', 'ProductBacklog', function($route, ProductBacklog){\n          return new ProductBacklog({projectId:$route.current.params.projectId});\n        }]\n      })\n    \n      // How to handle the \"edit a product backlog item\" route\n      .whenEdit({\n        projectId: projectId,\n        backlogItem : ['$route', 'ProductBacklog', function($route, ProductBacklog){\n          return ProductBacklog.getById($route.current.params.itemId);\n        }]\n      });\n  }])\n  \n  \n  \n  // The controller for listing product backlog items\n  .controller('ProductBacklogListCtrl', ['$scope', 'crudListMethods', 'projectId', 'backlog', function($scope, crudListMethods, projectId, backlog){\n  \n    $scope.backlog = backlog;\n    \n    angular.extend($scope, crudListMethods('/projects/'+projectId+'/productbacklog'));\n  \n  }])\n  \n  \n  \n  // The controller for editing a product backlog item\n  .controller('ProductBacklogEditCtrl', ['$scope', '$location', 'projectId', 'backlogItem', function($scope, $location, projectId, backlogItem){\n  \n    $scope.backlogItem = backlogItem;\n  \n    $scope.onSave = function () {\n      //TODO: missing message\n      $location.path('/projects/'+projectId+'/productbacklog');\n    };\n  \n    $scope.onError = function () {\n      //TODO: missing message\n      $scope.updateError = true;\n    };\n  \n  }]);\n\nangular.module('projects', ['resources.projects', 'productbacklog', 'sprints', 'security.authorization'])\n\n.config(['$routeProvider', 'securityAuthorizationProvider', function ($routeProvider, securityAuthorizationProvider) {\n  $routeProvider.when('/projects', {\n    templateUrl:'projects/projects-list.tpl.html',\n    controller:'ProjectsViewCtrl',\n    resolve:{\n      projects:['Projects', function (Projects) {\n        //TODO: fetch only for the current user\n        return Projects.all();\n      }],\n      authenticatedUser: securityAuthorizationProvider.requireAuthenticatedUser\n    }\n  });\n}])\n\n.controller('ProjectsViewCtrl', ['$scope', '$location', 'projects', function ($scope, $location, projects) {\n  $scope.projects = projects;\n\n  $scope.viewProject = function (projectId) {\n    $location.path('/projects/'+projectId);\n  };\n\n  $scope.manageBacklog = function (projectId) {\n    $location.path('/projects/'+projectId+'/productbacklog');\n  };\n\n  $scope.manageSprints = function (projectId) {\n    $location.path('/projects/'+projectId+'/sprints');\n  };\n}]);\n\nangular.module('sprints', ['resources.sprints', 'services.crud', 'tasks'])\n\n.config(['crudRouteProvider', function(crudRouteProvider){\n\n  var projectId = ['$route', function($route) {\n    return $route.current.params.projectId;\n  }];\n\n  var productBacklog = ['$route', 'ProductBacklog', function ($route, ProductBacklog) {\n    return ProductBacklog.forProject($route.current.params.projectId);\n  }];\n\n  crudRouteProvider.routesFor('Sprints', 'projects', 'projects/:projectId')\n  .whenList({\n    projectId: projectId,\n    sprints: ['$route', 'Sprints', function($route, Sprints){\n      return Sprints.forProject($route.current.params.projectId);\n    }]\n  })\n\n  .whenNew({\n    projectId: projectId,\n    sprint: ['$route', 'Sprints', function($route, Sprints){\n      return new Sprints({projectId:$route.current.params.projectId});\n    }],\n    productBacklog : productBacklog\n  })\n\n  .whenEdit({\n    projectId: projectId,\n    sprint: ['$route', 'Sprints', function($route, Sprints){\n      return Sprints.getById($route.current.params.itemId);\n    }],\n    productBacklog : productBacklog\n  });\n\n}])\n\n.controller('SprintsListCtrl', ['$scope', '$location', 'crudListMethods', 'projectId', 'sprints', function($scope, $location, crudListMethods, projectId, sprints){\n  $scope.sprints = sprints;\n\n  angular.extend($scope, crudListMethods('/projects/'+projectId+'/sprints'));\n\n  $scope.tasks = function (sprint) {\n    $location.path('/projects/'+projectId+'/sprints/'+sprint.$id()+'/tasks');\n  };\n}])\n\n.controller('SprintsEditCtrl', ['$scope', '$location', 'projectId', 'sprint', 'productBacklog', function($scope, $location, projectId, sprint, productBacklog){\n\n  $scope.productBacklog = productBacklog;\n  $scope.sprint = sprint;\n\n  $scope.onSave = function () {\n    $location.path('/projects/'+projectId+'/sprints');\n  };\n  $scope.onError = function () {\n    $scope.updateError = true;\n  };\n  \n  $scope.sprint.sprintBacklog = $scope.sprint.sprintBacklog || [];\n\n  $scope.productBacklogLookup = {};\n  angular.forEach($scope.productBacklog, function (productBacklogItem) {\n    $scope.productBacklogLookup[productBacklogItem.$id()] = productBacklogItem;\n  });\n\n  $scope.viewProductBacklogItem = function (productBacklogItemId) {\n    $location.path('/projects/'+projectId+'/productbacklog/'+productBacklogItemId);\n  };\n\n  $scope.addBacklogItem = function (backlogItem) {\n    $scope.sprint.sprintBacklog.push(backlogItem.$id());\n  };\n\n  $scope.removeBacklogItem = function (backlogItemId) {\n    $scope.sprint.sprintBacklog.splice($scope.sprint.sprintBacklog.indexOf(backlogItemId),1);\n  };\n\n  $scope.estimationInTotal = function () {\n    var totalEstimation = 0;\n    angular.forEach(sprint.sprintBacklog, function (backlogItemId) {\n      totalEstimation += $scope.productBacklogLookup[backlogItemId].estimation;\n    });\n    return totalEstimation;\n  };\n\n  $scope.notSelected = function (productBacklogItem) {\n    return $scope.sprint.sprintBacklog.indexOf(productBacklogItem.$id())===-1;\n  };\n}]);\nangular.module('tasks', ['resources.tasks', 'services.crud'])\n\n.config(['crudRouteProvider', function (crudRouteProvider) {\n\n  var sprintBacklogItems = ['Sprints', 'ProductBacklog', '$route', function (Sprints, ProductBacklog, $route) {\n    var sprintPromise = Sprints.getById($route.current.params.sprintId);\n    return sprintPromise.then(function (sprint) {\n      return ProductBacklog.getByIds(sprint.sprintBacklog);\n    });\n  }];\n\n  var teamMembers = ['Projects', 'Users', '$route', function (Projects, Users, $route) {\n    var projectPromise = Projects.getById($route.current.params.projectId);\n    return projectPromise.then(function(project){\n      return Users.getByIds(project.teamMembers);\n    });\n  }];\n\n  crudRouteProvider.routesFor('Tasks', 'projects/sprints', 'projects/:projectId/sprints/:sprintId')\n\n  .whenList({\n    tasks:['Tasks', '$route', function (Tasks, $route) {\n      return Tasks.forSprint($route.current.params.sprintId);\n    }]\n  })\n\n  .whenNew({\n    task:['Tasks', '$route', function (Tasks, $route) {\n      return new Tasks({\n        projectId:$route.current.params.projectId,\n        sprintId:$route.current.params.sprintId,\n        state:Tasks.statesEnum[0]\n      });\n    }],\n    sprintBacklogItems:sprintBacklogItems,\n    teamMembers:teamMembers\n  })\n\n  .whenEdit({\n    task:['Tasks', '$route', function (Tasks, $route) {\n      return Tasks.getById($route.current.params.itemId);\n    }],\n    sprintBacklogItems:sprintBacklogItems,\n    teamMembers:teamMembers\n  });\n}])\n\n.controller('TasksListCtrl', ['$scope', 'crudListMethods', '$route', 'tasks', function ($scope, crudListMethods, $route, tasks) {\n  $scope.tasks = tasks;\n\n  var projectId = $route.current.params.projectId;\n  var sprintId = $route.current.params.sprintId;\n  angular.extend($scope, crudListMethods('/projects/' + projectId + '/sprints/' + sprintId + '/tasks'));\n}])\n\n.controller('TasksEditCtrl', ['$scope', '$location', '$route', 'Tasks', 'sprintBacklogItems', 'teamMembers', 'task', function ($scope, $location, $route, Tasks, sprintBacklogItems, teamMembers, task) {\n  $scope.task = task;\n  $scope.statesEnum = Tasks.statesEnum;\n  $scope.sprintBacklogItems = sprintBacklogItems;\n  $scope.teamMembers = teamMembers;\n\n  $scope.onSave = function () {\n    $location.path('/admin/users');\n  };\n  $scope.onError = function() {\n    $scope.updateError = true;\n  };\n}]);\nangular.module('projectsinfo', [], ['$routeProvider', function($routeProvider){\n\n  $routeProvider.when('/projectsinfo', {\n    templateUrl:'projectsinfo/list.tpl.html',\n    controller:'ProjectsInfoListCtrl',\n    resolve:{\n      projects:['Projects', function(Projects){\n        return Projects.all();\n      }]\n    }\n  });\n}]);\n\nangular.module('projectsinfo').controller('ProjectsInfoListCtrl', ['$scope', 'projects', function($scope, projects){\n  $scope.projects = projects;\n}]);\nangular.module('directives.crud', ['directives.crud.buttons', 'directives.crud.edit']);\n\nangular.module('directives.crud.buttons', [])\n\n.directive('crudButtons', function () {\n  return {\n    restrict:'E',\n    replace:true,\n    template:\n      '<div>' +\n      '  <button type=\"button\" class=\"btn btn-primary save\" ng-disabled=\"!canSave()\" ng-click=\"save()\">Save</button>' +\n      '  <button type=\"button\" class=\"btn btn-warning revert\" ng-click=\"revertChanges()\" ng-disabled=\"!canRevert()\">Revert changes</button>'+\n      '  <button type=\"button\" class=\"btn btn-danger remove\" ng-click=\"remove()\" ng-show=\"canRemove()\">Remove</button>'+\n      '</div>'\n  };\n});\nangular.module('directives.crud.edit', [])\n\n// Apply this directive to an element at or below a form that will manage CRUD operations on a resource.\n// - The resource must expose the following instance methods: $saveOrUpdate(), $id() and $remove()\n.directive('crudEdit', ['$parse', function($parse) {\n  return {\n    // We ask this directive to create a new child scope so that when we add helper methods to the scope\n    // it doesn't make a mess of the parent scope.\n    // - Be aware that if you write to the scope from within the form then you must remember that there is a child scope at the point\n    scope: true,\n    // We need access to a form so we require a FormController from this element or a parent element\n    require: '^form',\n    // This directive can only appear as an attribute\n    link: function(scope, element, attrs, form) {\n      // We extract the value of the crudEdit attribute\n      // - it should be an assignable expression evaluating to the model (resource) that is going to be edited\n      var resourceGetter = $parse(attrs.crudEdit);\n      var resourceSetter = resourceGetter.assign;\n      // Store the resource object for easy access\n      var resource = resourceGetter(scope);\n      // Store a copy for reverting the changes\n      var original = angular.copy(resource);\n\n      var checkResourceMethod = function(methodName) {\n        if ( !angular.isFunction(resource[methodName]) ) {\n          throw new Error('crudEdit directive: The resource must expose the ' + methodName + '() instance method');\n        }\n      };\n      checkResourceMethod('$saveOrUpdate');\n      checkResourceMethod('$id');\n      checkResourceMethod('$remove');\n\n      // This function helps us extract the callback functions from the directive attributes\n      var makeFn = function(attrName) {\n        var fn = scope.$eval(attrs[attrName]);\n        if ( !angular.isFunction(fn) ) {\n          throw new Error('crudEdit directive: The attribute \"' + attrName + '\" must evaluate to a function');\n        }\n        return fn;\n      };\n      // Set up callbacks with fallback\n      // onSave attribute -> onSave scope -> noop\n      var userOnSave = attrs.onSave ? makeFn('onSave') : ( scope.onSave || angular.noop );\n      var onSave = function(result, status, headers, config) {\n        // Reset the original to help with reverting and pristine checks\n        original = result;\n        userOnSave(result, status, headers, config);\n      };\n      // onRemove attribute -> onRemove scope -> onSave attribute -> onSave scope -> noop\n      var onRemove = attrs.onRemove ? makeFn('onRemove') : ( scope.onRemove || onSave );\n      // onError attribute -> onError scope -> noop\n      var onError = attrs.onError ? makeFn('onError') : ( scope.onError || angular.noop );\n\n      // The following functions should be triggered by elements on the form\n      // - e.g. ng-click=\"save()\"\n      scope.save = function() {\n        resource.$saveOrUpdate(onSave, onSave, onError, onError);\n      };\n      scope.revertChanges = function() {\n        resource = angular.copy(original);\n        resourceSetter(scope, resource);\n        form.$setPristine();\n      };\n      scope.remove = function() {\n        if(resource.$id()) {\n          resource.$remove(onRemove, onError);\n        } else {\n          onRemove();\n        }\n      };\n\n      // The following functions can be called to modify the behaviour of elements in the form\n      // - e.g. ng-disable=\"!canSave()\"\n      scope.canSave = function() {\n        return form.$valid && !angular.equals(resource, original);\n      };\n      scope.canRevert = function() {\n        return !angular.equals(resource, original);\n      };\n      scope.canRemove = function() {\n        return resource.$id();\n      };\n      /**\n       * Get the CSS classes for this item, to be used by the ng-class directive\n       * @param {string} fieldName The name of the field on the form, for which we want to get the CSS classes\n       * @return {object} A hash where each key is a CSS class and the corresponding value is true if the class is to be applied.\n       */\n      scope.getCssClasses = function(fieldName) {\n        var ngModelController = form[fieldName];\n        return {\n          error: ngModelController.$invalid && !angular.equals(resource, original),\n          success: ngModelController.$valid && !angular.equals(resource, original)\n        };\n      };\n      /**\n       * Whether to show an error message for the specified error\n       * @param {string} fieldName The name of the field on the form, of which we want to know whether to show the error\n       * @param  {string} error - The name of the error as given by a validation directive\n       * @return {Boolean} true if the error should be shown\n       */\n      scope.showError = function(fieldName, error) {\n        return form[fieldName].$error[error];\n      };\n    }\n  };\n}]);\nangular.module('directives.gravatar', [])\n\n// A simple directive to display a gravatar image given an email\n.directive('gravatar', ['md5', function(md5) {\n\n  return {\n    restrict: 'E',\n    template: '<img ng-src=\"http://www.gravatar.com/avatar/{{hash}}{{getParams}}\"/>',\n    replace: true,\n    scope: {\n      email: '=',\n      size: '=',\n      defaultImage: '=',\n      forceDefault: '='\n    },\n    link: function(scope, element, attrs) {\n      scope.options = {};\n      scope.$watch('email', function(email) {\n        if ( email ) {\n          scope.hash = md5(email.trim().toLowerCase());\n        }\n      });\n      scope.$watch('size', function(size) {\n        scope.options.s = (angular.isNumber(size)) ? size : undefined;\n        generateParams();\n      });\n      scope.$watch('forceDefault', function(forceDefault) {\n        scope.options.f = forceDefault ? 'y' : undefined;\n        generateParams();\n      });\n      scope.$watch('defaultImage', function(defaultImage) {\n        scope.options.d = defaultImage ? defaultImage : undefined;\n        generateParams();\n      });\n      function generateParams() {\n        var options = [];\n        scope.getParams = '';\n        angular.forEach(scope.options, function(value, key) {\n          if ( value ) {\n            options.push(key + '=' + encodeURIComponent(value));\n          }\n        });\n        if ( options.length > 0 ) {\n          scope.getParams = '?' + options.join('&');\n        }\n      }\n    }\n  };\n}])\n\n.factory('md5', function() {\n  function md5cycle(x, k) {\n    var a = x[0],\n      b = x[1],\n      c = x[2],\n      d = x[3];\n\n    a = ff(a, b, c, d, k[0], 7, -680876936);\n    d = ff(d, a, b, c, k[1], 12, -389564586);\n    c = ff(c, d, a, b, k[2], 17, 606105819);\n    b = ff(b, c, d, a, k[3], 22, -1044525330);\n    a = ff(a, b, c, d, k[4], 7, -176418897);\n    d = ff(d, a, b, c, k[5], 12, 1200080426);\n    c = ff(c, d, a, b, k[6], 17, -1473231341);\n    b = ff(b, c, d, a, k[7], 22, -45705983);\n    a = ff(a, b, c, d, k[8], 7, 1770035416);\n    d = ff(d, a, b, c, k[9], 12, -1958414417);\n    c = ff(c, d, a, b, k[10], 17, -42063);\n    b = ff(b, c, d, a, k[11], 22, -1990404162);\n    a = ff(a, b, c, d, k[12], 7, 1804603682);\n    d = ff(d, a, b, c, k[13], 12, -40341101);\n    c = ff(c, d, a, b, k[14], 17, -1502002290);\n    b = ff(b, c, d, a, k[15], 22, 1236535329);\n\n    a = gg(a, b, c, d, k[1], 5, -165796510);\n    d = gg(d, a, b, c, k[6], 9, -1069501632);\n    c = gg(c, d, a, b, k[11], 14, 643717713);\n    b = gg(b, c, d, a, k[0], 20, -373897302);\n    a = gg(a, b, c, d, k[5], 5, -701558691);\n    d = gg(d, a, b, c, k[10], 9, 38016083);\n    c = gg(c, d, a, b, k[15], 14, -660478335);\n    b = gg(b, c, d, a, k[4], 20, -405537848);\n    a = gg(a, b, c, d, k[9], 5, 568446438);\n    d = gg(d, a, b, c, k[14], 9, -1019803690);\n    c = gg(c, d, a, b, k[3], 14, -187363961);\n    b = gg(b, c, d, a, k[8], 20, 1163531501);\n    a = gg(a, b, c, d, k[13], 5, -1444681467);\n    d = gg(d, a, b, c, k[2], 9, -51403784);\n    c = gg(c, d, a, b, k[7], 14, 1735328473);\n    b = gg(b, c, d, a, k[12], 20, -1926607734);\n\n    a = hh(a, b, c, d, k[5], 4, -378558);\n    d = hh(d, a, b, c, k[8], 11, -2022574463);\n    c = hh(c, d, a, b, k[11], 16, 1839030562);\n    b = hh(b, c, d, a, k[14], 23, -35309556);\n    a = hh(a, b, c, d, k[1], 4, -1530992060);\n    d = hh(d, a, b, c, k[4], 11, 1272893353);\n    c = hh(c, d, a, b, k[7], 16, -155497632);\n    b = hh(b, c, d, a, k[10], 23, -1094730640);\n    a = hh(a, b, c, d, k[13], 4, 681279174);\n    d = hh(d, a, b, c, k[0], 11, -358537222);\n    c = hh(c, d, a, b, k[3], 16, -722521979);\n    b = hh(b, c, d, a, k[6], 23, 76029189);\n    a = hh(a, b, c, d, k[9], 4, -640364487);\n    d = hh(d, a, b, c, k[12], 11, -421815835);\n    c = hh(c, d, a, b, k[15], 16, 530742520);\n    b = hh(b, c, d, a, k[2], 23, -995338651);\n\n    a = ii(a, b, c, d, k[0], 6, -198630844);\n    d = ii(d, a, b, c, k[7], 10, 1126891415);\n    c = ii(c, d, a, b, k[14], 15, -1416354905);\n    b = ii(b, c, d, a, k[5], 21, -57434055);\n    a = ii(a, b, c, d, k[12], 6, 1700485571);\n    d = ii(d, a, b, c, k[3], 10, -1894986606);\n    c = ii(c, d, a, b, k[10], 15, -1051523);\n    b = ii(b, c, d, a, k[1], 21, -2054922799);\n    a = ii(a, b, c, d, k[8], 6, 1873313359);\n    d = ii(d, a, b, c, k[15], 10, -30611744);\n    c = ii(c, d, a, b, k[6], 15, -1560198380);\n    b = ii(b, c, d, a, k[13], 21, 1309151649);\n    a = ii(a, b, c, d, k[4], 6, -145523070);\n    d = ii(d, a, b, c, k[11], 10, -1120210379);\n    c = ii(c, d, a, b, k[2], 15, 718787259);\n    b = ii(b, c, d, a, k[9], 21, -343485551);\n\n    x[0] = add32(a, x[0]);\n    x[1] = add32(b, x[1]);\n    x[2] = add32(c, x[2]);\n    x[3] = add32(d, x[3]);\n\n  }\n\n  function cmn(q, a, b, x, s, t) {\n    a = add32(add32(a, q), add32(x, t));\n    return add32((a << s) | (a >>> (32 - s)), b);\n  }\n\n  function ff(a, b, c, d, x, s, t) {\n    return cmn((b & c) | ((~b) & d), a, b, x, s, t);\n  }\n\n  function gg(a, b, c, d, x, s, t) {\n    return cmn((b & d) | (c & (~d)), a, b, x, s, t);\n  }\n\n  function hh(a, b, c, d, x, s, t) {\n    return cmn(b ^ c ^ d, a, b, x, s, t);\n  }\n\n  function ii(a, b, c, d, x, s, t) {\n    return cmn(c ^ (b | (~d)), a, b, x, s, t);\n  }\n\n  function md51(s) {\n    txt = '';\n    var n = s.length,\n      state = [1732584193, -271733879, -1732584194, 271733878],\n      i;\n    for (i = 64; i <= s.length; i += 64) {\n      md5cycle(state, md5blk(s.substring(i - 64, i)));\n    }\n    s = s.substring(i - 64);\n    var tail = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n    for (i = 0; i < s.length; i++) {\n      tail[i >> 2] |= s.charCodeAt(i) << ((i % 4) << 3);\n    }\n    tail[i >> 2] |= 0x80 << ((i % 4) << 3);\n    if (i > 55) {\n      md5cycle(state, tail);\n      for (i = 0; i < 16; i++) {\n        tail[i] = 0;\n      }\n    }\n    tail[14] = n * 8;\n    md5cycle(state, tail);\n    return state;\n  }\n\n  /* there needs to be support for Unicode here,\n   * unless we pretend that we can redefine the MD-5\n   * algorithm for multi-byte characters (perhaps\n   * by adding every four 16-bit characters and\n   * shortening the sum to 32 bits). Otherwise\n   * I suggest performing MD-5 as if every character\n   * was two bytes--e.g., 0040 0025 = @%--but then\n   * how will an ordinary MD-5 sum be matched?\n   * There is no way to standardize text to something\n   * like UTF-8 before transformation; speed cost is\n   * utterly prohibitive. The JavaScript standard\n   * itself needs to look at this: it should start\n   * providing access to strings as preformed UTF-8\n   * 8-bit unsigned value arrays.\n   */\n\n  function md5blk(s) { /* I figured global was faster.   */\n    var md5blks = [],\n      i; /* Andy King said do it this way. */\n    for (i = 0; i < 64; i += 4) {\n      md5blks[i >> 2] = s.charCodeAt(i) + (s.charCodeAt(i + 1) << 8) + (s.charCodeAt(i + 2) << 16) + (s.charCodeAt(i + 3) << 24);\n    }\n    return md5blks;\n  }\n\n  var hex_chr = '0123456789abcdef'.split('');\n\n  function rhex(n) {\n    var s = '', j = 0;\n    for (; j < 4; j++) {\n      s += hex_chr[(n >> (j * 8 + 4)) & 0x0F] + hex_chr[(n >> (j * 8)) & 0x0F];\n    }\n    return s;\n  }\n\n  function hex(x) {\n    for (var i = 0; i < x.length; i++) {\n      x[i] = rhex(x[i]);\n    }\n    return x.join('');\n  }\n\n  function md5(s) {\n    return hex(md51(s));\n  }\n\n  /* this function is much faster,\n  so if possible we use it. Some IEs\n  are the only ones I know of that\n  need the idiotic second function,\n  generated by an if clause.  */\n\n  add32 = function(a, b) {\n    return (a + b) & 0xFFFFFFFF;\n  };\n\n  if (md5('hello') !== '5d41402abc4b2a76b9719d911017c592') {\n    add32 = function (x, y) {\n      var lsw = (x & 0xFFFF) + (y & 0xFFFF),\n        msw = (x >> 16) + (y >> 16) + (lsw >> 16);\n      return (msw << 16) | (lsw & 0xFFFF);\n    };\n  }\n\n  return md5;\n});\nangular.module('directives.modal', []).directive('modal', ['$parse',function($parse) {\n  var backdropEl;\n  var body = angular.element(document.getElementsByTagName('body')[0]);\n  var defaultOpts = {\n    backdrop: true,\n    escape: true\n  };\n  return {\n    restrict: 'ECA',\n    link: function(scope, elm, attrs) {\n      var opts = angular.extend(defaultOpts, scope.$eval(attrs.uiOptions || attrs.bsOptions || attrs.options));\n      var shownExpr = attrs.modal || attrs.show;\n      var setClosed;\n\n      if (attrs.close) {\n        setClosed = function() {\n          scope.$apply(attrs.close);\n        };\n      } else {\n        setClosed = function() {\n          scope.$apply(function() {\n            $parse(shownExpr).assign(scope, false);\n          });\n        };\n      }\n      elm.addClass('modal');\n\n      if (opts.backdrop && !backdropEl) {\n        backdropEl = angular.element('<div class=\"modal-backdrop\"></div>');\n        backdropEl.css('display','none');\n        body.append(backdropEl);\n      }\n\n      function setShown(shown) {\n        scope.$apply(function() {\n          model.assign(scope, shown);\n        });\n      }\n\n      function escapeClose(evt) {\n        if (evt.which === 27) { setClosed(); }\n      }\n      function clickClose() {\n        setClosed();\n      }\n\n      function close() {\n        if (opts.escape) { body.unbind('keyup', escapeClose); }\n        if (opts.backdrop) {\n          backdropEl.css('display', 'none').removeClass('in');\n          backdropEl.unbind('click', clickClose);\n        }\n        elm.css('display', 'none').removeClass('in');\n        body.removeClass('modal-open');\n      }\n      function open() {\n        if (opts.escape) { body.bind('keyup', escapeClose); }\n        if (opts.backdrop) {\n          backdropEl.css('display', 'block').addClass('in');\n          backdropEl.bind('click', clickClose);\n        }\n        elm.css('display', 'block').addClass('in');\n        body.addClass('modal-open');\n      }\n\n      scope.$watch(shownExpr, function(isShown, oldShown) {\n        if (isShown) {\n          open();\n        } else {\n          close();\n        }\n      });\n    }\n  };\n}]);\n\nangular.module('resources.productbacklog', ['mongolabResource']);\nangular.module('resources.productbacklog').factory('ProductBacklog', ['mongolabResource', function (mongolabResource) {\n  var ProductBacklog = mongolabResource('productbacklog');\n\n  ProductBacklog.forProject = function (projectId) {\n    return ProductBacklog.query({projectId:projectId});\n  };\n\n  return ProductBacklog;\n}]);\n\nangular.module('resources.projects', ['mongolabResource']);\nangular.module('resources.projects').factory('Projects', ['mongolabResource', function ($mongolabResource) {\n\n  var Projects = $mongolabResource('projects');\n\n  Projects.forUser = function(userId, successcb, errorcb) {\n    //TODO: get projects for this user only (!)\n    return Projects.query({}, successcb, errorcb);\n  };\n\n  Projects.prototype.isProductOwner = function (userId) {\n    return this.productOwner === userId;\n  };\n  Projects.prototype.canActAsProductOwner = function (userId) {\n    return !this.isScrumMaster(userId) && !this.isDevTeamMember(userId);\n  };\n  Projects.prototype.isScrumMaster = function (userId) {\n    return this.scrumMaster === userId;\n  };\n  Projects.prototype.canActAsScrumMaster = function (userId) {\n    return !this.isProductOwner(userId);\n  };\n  Projects.prototype.isDevTeamMember = function (userId) {\n    return this.teamMembers.indexOf(userId) >= 0;\n  };\n  Projects.prototype.canActAsDevTeamMember = function (userId) {\n    return !this.isProductOwner(userId);\n  };\n\n  Projects.prototype.getRoles = function (userId) {\n    var roles = [];\n    if (this.isProductOwner(userId)) {\n      roles.push('PO');\n    } else {\n      if (this.isScrumMaster(userId)){\n        roles.push('SM');\n      }\n      if (this.isDevTeamMember(userId)){\n        roles.push('DEV');\n      }\n    }\n    return roles;\n  };\n\n  return Projects;\n}]);\nangular.module('resources.sprints', ['mongolabResource']);\nangular.module('resources.sprints').factory('Sprints', ['mongolabResource', function (mongolabResource) {\n\n  var Sprints = mongolabResource('sprints');\n  Sprints.forProject = function (projectId) {\n    return Sprints.query({projectId:projectId});\n  };\n  return Sprints;\n}]);\nangular.module('resources.tasks', ['mongolabResource']);\nangular.module('resources.tasks').factory('Tasks', ['mongolabResource', function (mongolabResource) {\n\n  var Tasks = mongolabResource('tasks');\n\n  Tasks.statesEnum = ['TODO', 'IN_DEV', 'BLOCKED', 'IN_TEST', 'DONE'];\n\n  Tasks.forProductBacklogItem = function (productBacklogItem) {\n    return Tasks.query({productBacklogItem:productBacklogItem});\n  };\n\n  Tasks.forSprint = function (sprintId) {\n    return Tasks.query({sprintId:sprintId});\n  };\n\n  Tasks.forUser = function (userId) {\n    return Tasks.query({userId:userId});\n  };\n\n  Tasks.forProject = function (projectId) {\n    return Tasks.query({projectId:projectId});\n  };\n\n  return Tasks;\n}]);\nangular.module('resources.users', ['mongolabResource']);\nangular.module('resources.users').factory('Users', ['mongolabResource', function (mongoResource) {\n\n  var userResource = mongoResource('users');\n  userResource.prototype.getFullName = function () {\n    return this.lastName + \" \" + this.firstName + \" (\" + this.email + \")\";\n  };\n\n  return userResource;\n}]);\n\nangular.module('security.authorization', ['security.service'])\n\n// This service provides guard methods to support AngularJS routes.\n// You can add them as resolves to routes to require authorization levels\n// before allowing a route change to complete\n.provider('securityAuthorization', {\n\n  requireAdminUser: ['securityAuthorization', function(securityAuthorization) {\n    return securityAuthorization.requireAdminUser();\n  }],\n\n  requireAuthenticatedUser: ['securityAuthorization', function(securityAuthorization) {\n    return securityAuthorization.requireAuthenticatedUser();\n  }],\n\n  $get: ['security', 'securityRetryQueue', function(security, queue) {\n    var service = {\n\n      // Require that there is an authenticated user\n      // (use this in a route resolve to prevent non-authenticated users from entering that route)\n      requireAuthenticatedUser: function() {\n        var promise = security.requestCurrentUser().then(function(userInfo) {\n          if ( !security.isAuthenticated() ) {\n            return queue.pushRetryFn('unauthenticated-client', service.requireAuthenticatedUser);\n          }\n        });\n        return promise;\n      },\n\n      // Require that there is an administrator logged in\n      // (use this in a route resolve to prevent non-administrators from entering that route)\n      requireAdminUser: function() {\n        var promise = security.requestCurrentUser().then(function(userInfo) {\n          if ( !security.isAdmin() ) {\n            return queue.pushRetryFn('unauthorized-client', service.requireAdminUser);\n          }\n        });\n        return promise;\n      }\n\n    };\n\n    return service;\n  }]\n});\n// Based loosely around work by Witold Szczerba - https://github.com/witoldsz/angular-http-auth\nangular.module('security', [\n  'security.service',\n  'security.interceptor',\n  'security.login',\n  'security.authorization']);\n\nangular.module('security.interceptor', ['security.retryQueue'])\n\n// This http interceptor listens for authentication failures\n.factory('securityInterceptor', ['$injector', 'securityRetryQueue', function($injector, queue) {\n  return function(promise) {\n    // Intercept failed requests\n    return promise.then(null, function(originalResponse) {\n      if(originalResponse.status === 401) {\n        // The request bounced because it was not authorized - add a new request to the retry queue\n        promise = queue.pushRetryFn('unauthorized-server', function retryRequest() {\n          // We must use $injector to get the $http service to prevent circular dependency\n          return $injector.get('$http')(originalResponse.config);\n        });\n      }\n      return promise;\n    });\n  };\n}])\n\n// We have to add the interceptor to the queue as a string because the interceptor depends upon service instances that are not available in the config block.\n.config(['$httpProvider', function($httpProvider) {\n  $httpProvider.responseInterceptors.push('securityInterceptor');\n}]);\nangular.module('security.login.form', ['services.localizedMessages'])\n\n// The LoginFormController provides the behaviour behind a reusable form to allow users to authenticate.\n// This controller and its template (login/form.tpl.html) are used in a modal dialog box by the security service.\n.controller('LoginFormController', ['$scope', 'security', 'localizedMessages', function($scope, security, localizedMessages) {\n  // The model for this form \n  $scope.user = {};\n\n  // Any error message from failing to login\n  $scope.authError = null;\n\n  // The reason that we are being asked to login - for instance because we tried to access something to which we are not authorized\n  // We could do something diffent for each reason here but to keep it simple...\n  $scope.authReason = null;\n  if ( security.getLoginReason() ) {\n    $scope.authReason = ( security.isAuthenticated() ) ?\n      localizedMessages.get('login.reason.notAuthorized') :\n      localizedMessages.get('login.reason.notAuthenticated');\n  }\n\n  // Attempt to authenticate the user specified in the form's model\n  $scope.login = function() {\n    // Clear any previous security errors\n    $scope.authError = null;\n\n    // Try to login\n    security.login($scope.user.email, $scope.user.password).then(function(loggedIn) {\n      if ( !loggedIn ) {\n        // If we get here then the login failed due to bad credentials\n        $scope.authError = localizedMessages.get('login.error.invalidCredentials');\n      }\n    }, function(x) {\n      // If we get here then there was a problem with the login request to the server\n      $scope.authError = localizedMessages.get('login.error.serverError', { exception: x });\n    });\n  };\n\n  $scope.clearForm = function() {\n    $scope.user = {};\n  };\n\n  $scope.cancelLogin = function() {\n    security.cancelLogin();\n  };\n}]);\n\nangular.module('security.login', ['security.login.form', 'security.login.toolbar']);\nangular.module('security.login.toolbar', [])\n\n// The loginToolbar directive is a reusable widget that can show login or logout buttons\n// and information the current authenticated user\n.directive('loginToolbar', ['security', function(security) {\n  var directive = {\n    templateUrl: 'security/login/toolbar.tpl.html',\n    restrict: 'E',\n    replace: true,\n    scope: true,\n    link: function($scope, $element, $attrs, $controller) {\n      $scope.isAuthenticated = security.isAuthenticated;\n      $scope.login = security.showLogin;\n      $scope.logout = security.logout;\n      $scope.$watch(function() {\n        return security.currentUser;\n      }, function(currentUser) {\n        $scope.currentUser = currentUser;\n      });\n    }\n  };\n  return directive;\n}]);\nangular.module('security.retryQueue', [])\n\n// This is a generic retry queue for security failures.  Each item is expected to expose two functions: retry and cancel.\n.factory('securityRetryQueue', ['$q', '$log', function($q, $log) {\n  var retryQueue = [];\n  var service = {\n    // The security service puts its own handler in here!\n    onItemAddedCallbacks: [],\n    \n    hasMore: function() {\n      return retryQueue.length > 0;\n    },\n    push: function(retryItem) {\n      retryQueue.push(retryItem);\n      // Call all the onItemAdded callbacks\n      angular.forEach(service.onItemAddedCallbacks, function(cb) {\n        try {\n          cb(retryItem);\n        } catch(e) {\n          $log.error('securityRetryQueue.push(retryItem): callback threw an error' + e);\n        }\n      });\n    },\n    pushRetryFn: function(reason, retryFn) {\n      // The reason parameter is optional\n      if ( arguments.length === 1) {\n        retryFn = reason;\n        reason = undefined;\n      }\n\n      // The deferred object that will be resolved or rejected by calling retry or cancel\n      var deferred = $q.defer();\n      var retryItem = {\n        reason: reason,\n        retry: function() {\n          // Wrap the result of the retryFn into a promise if it is not already\n          $q.when(retryFn()).then(function(value) {\n            // If it was successful then resolve our deferred\n            deferred.resolve(value);\n          }, function(value) {\n            // Othewise reject it\n            deferred.reject(value);\n          });\n        },\n        cancel: function() {\n          // Give up on retrying and reject our deferred\n          deferred.reject();\n        }\n      };\n      service.push(retryItem);\n      return deferred.promise;\n    },\n    retryReason: function() {\n      return service.hasMore() && retryQueue[0].reason;\n    },\n    cancelAll: function() {\n      while(service.hasMore()) {\n        retryQueue.shift().cancel();\n      }\n    },\n    retryAll: function() {\n      while(service.hasMore()) {\n        retryQueue.shift().retry();\n      }\n    }\n  };\n  return service;\n}]);\n\n// Based loosely around work by Witold Szczerba - https://github.com/witoldsz/angular-http-auth\nangular.module('security.service', [\n  'security.retryQueue',    // Keeps track of failed requests that need to be retried once the user logs in\n  'security.login',         // Contains the login form template and controller\n  'ui.bootstrap.dialog'     // Used to display the login form as a modal dialog.\n])\n\n.factory('security', ['$http', '$q', '$location', 'securityRetryQueue', '$dialog', function($http, $q, $location, queue, $dialog) {\n\n  // Redirect to the given url (defaults to '/')\n  function redirect(url) {\n    url = url || '/';\n    $location.path(url);\n  }\n\n  // Login form dialog stuff\n  var loginDialog = null;\n  function openLoginDialog() {\n    if ( loginDialog ) {\n      throw new Error('Trying to open a dialog that is already open!');\n    }\n    loginDialog = $dialog.dialog();\n    loginDialog.open('security/login/form.tpl.html', 'LoginFormController').then(onLoginDialogClose);\n  }\n  function closeLoginDialog(success) {\n    if (loginDialog) {\n      loginDialog.close(success);\n    }\n  }\n  function onLoginDialogClose(success) {\n    loginDialog = null;\n    if ( success ) {\n      queue.retryAll();\n    } else {\n      queue.cancelAll();\n      redirect();\n    }\n  }\n\n  // Register a handler for when an item is added to the retry queue\n  queue.onItemAddedCallbacks.push(function(retryItem) {\n    if ( queue.hasMore() ) {\n      service.showLogin();\n    }\n  });\n\n  // The public API of the service\n  var service = {\n\n    // Get the first reason for needing a login\n    getLoginReason: function() {\n      return queue.retryReason();\n    },\n\n    // Show the modal login dialog\n    showLogin: function() {\n      openLoginDialog();\n    },\n\n    // Attempt to authenticate a user by the given email and password\n    login: function(email, password) {\n      var request = $http.post('/login', {email: email, password: password});\n      return request.then(function(response) {\n        service.currentUser = response.data.user;\n        if ( service.isAuthenticated() ) {\n          closeLoginDialog(true);\n        }\n      });\n    },\n\n    // Give up trying to login and clear the retry queue\n    cancelLogin: function() {\n      closeLoginDialog(false);\n      redirect();\n    },\n\n    // Logout the current user and redirect\n    logout: function(redirectTo) {\n      $http.post('/logout').then(function() {\n        service.currentUser = null;\n        redirect(redirectTo);\n      });\n    },\n\n    // Ask the backend to see if a user is already authenticated - this may be from a previous session.\n    requestCurrentUser: function() {\n      if ( service.isAuthenticated() ) {\n        return $q.when(service.currentUser);\n      } else {\n        return $http.get('/current-user').then(function(response) {\n          service.currentUser = response.data.user;\n          return service.currentUser;\n        });\n      }\n    },\n\n    // Information about the current user\n    currentUser: null,\n\n    // Is the current user authenticated?\n    isAuthenticated: function(){\n      return !!service.currentUser;\n    },\n    \n    // Is the current user an adminstrator?\n    isAdmin: function() {\n      return !!(service.currentUser && service.currentUser.admin);\n    }\n  };\n\n  return service;\n}]);\n\nangular.module('services.breadcrumbs', []);\nangular.module('services.breadcrumbs').factory('breadcrumbs', ['$rootScope', '$location', function($rootScope, $location){\n\n  var breadcrumbs = [];\n  var breadcrumbsService = {};\n\n  //we want to update breadcrumbs only when a route is actually changed\n  //as $location.path() will get updated imediatelly (even if route change fails!)\n  $rootScope.$on('$routeChangeSuccess', function(event, current){\n\n    var pathElements = $location.path().split('/'), result = [], i;\n    var breadcrumbPath = function (index) {\n      return '/' + (pathElements.slice(0, index + 1)).join('/');\n    };\n\n    pathElements.shift();\n    for (i=0; i<pathElements.length; i++) {\n      result.push({name: pathElements[i], path: breadcrumbPath(i)});\n    }\n\n    breadcrumbs = result;\n  });\n\n  breadcrumbsService.getAll = function() {\n    return breadcrumbs;\n  };\n\n  breadcrumbsService.getFirst = function() {\n    return breadcrumbs[0] || {};\n  };\n\n  return breadcrumbsService;\n}]);\nangular.module('services.crud', ['services.crudRouteProvider']);\nangular.module('services.crud').factory('crudEditMethods', function () {\n\n  return function (itemName, item, formName, successcb, errorcb) {\n\n    var mixin = {};\n\n    mixin[itemName] = item;\n    mixin[itemName+'Copy'] = angular.copy(item);\n\n    mixin.save = function () {\n      this[itemName].$saveOrUpdate(successcb, successcb, errorcb, errorcb);\n    };\n\n    mixin.canSave = function () {\n      return this[formName].$valid && !angular.equals(this[itemName], this[itemName+'Copy']);\n    };\n\n    mixin.revertChanges = function () {\n      this[itemName] = angular.copy(this[itemName+'Copy']);\n    };\n\n    mixin.canRevert = function () {\n      return !angular.equals(this[itemName], this[itemName+'Copy']);\n    };\n\n    mixin.remove = function () {\n      if (this[itemName].$id()) {\n        this[itemName].$remove(successcb, errorcb);\n      } else {\n        successcb();\n      }\n    };\n\n    mixin.canRemove = function() {\n      return item.$id();\n    };\n\n    /**\n     * Get the CSS classes for this item, to be used by the ng-class directive\n     * @param {string} fieldName The name of the field on the form, for which we want to get the CSS classes\n     * @return {object} A hash where each key is a CSS class and the corresponding value is true if the class is to be applied.\n     */\n    mixin.getCssClasses = function(fieldName) {\n      var ngModelController = this[formName][fieldName];\n      return {\n        error: ngModelController.$invalid && ngModelController.$dirty,\n        success: ngModelController.$valid && ngModelController.$dirty\n      };\n    };\n\n    /**\n     * Whether to show an error message for the specified error\n     * @param {string} fieldName The name of the field on the form, of which we want to know whether to show the error\n     * @param  {string} error - The name of the error as given by a validation directive\n     * @return {Boolean} true if the error should be shown\n     */\n    mixin.showError = function(fieldName, error) {\n      return this[formName][fieldName].$error[error];\n    };\n\n    return mixin;\n  };\n});\n\nangular.module('services.crud').factory('crudListMethods', ['$location', function ($location) {\n\n  return function (pathPrefix) {\n\n    var mixin = {};\n\n    mixin['new'] = function () {\n      $location.path(pathPrefix+'/new');\n    };\n\n    mixin['edit'] = function (itemId) {\n      $location.path(pathPrefix+'/'+itemId);\n    };\n\n    return mixin;\n  };\n}]);\n(function() {\n\n  function crudRouteProvider($routeProvider) {\n\n    // This $get noop is because at the moment in AngularJS \"providers\" must provide something\n    // via a $get method.\n    // When AngularJS has \"provider helpers\" then this will go away!\n    this.$get = angular.noop;\n\n    // Again, if AngularJS had \"provider helpers\" we might be able to return `routesFor()` as the\n    // crudRouteProvider itself.  Then we would have a much cleaner syntax and not have to do stuff\n    // like:\n    //\n    // ```\n    // myMod.config(function(crudRouteProvider) {\n    //   var routeProvider = crudRouteProvider.routesFor('MyBook', '/myApp');\n    // });\n    // ```\n    //\n    // but instead have something like:\n    //\n    //\n    // ```\n    // myMod.config(function(crudRouteProvider) {\n    //   var routeProvider = crudRouteProvider('MyBook', '/myApp');\n    // });\n    // ```\n    //\n    // In any case, the point is that this function is the key part of this \"provider helper\".\n    // We use it to create routes for CRUD operations.  We give it some basic information about\n    // the resource and the urls then it it returns our own special routeProvider.\n    this.routesFor = function(resourceName, urlPrefix, routePrefix) {\n      var baseUrl = resourceName.toLowerCase();\n      var baseRoute = '/' + resourceName.toLowerCase();\n      routePrefix = routePrefix || urlPrefix;\n\n      // Prepend the urlPrefix if available.\n      if ( angular.isString(urlPrefix) && urlPrefix !== '' ) {\n        baseUrl = urlPrefix + '/' + baseUrl;\n      }\n\n      // Prepend the routePrefix if it was provided;\n      if (routePrefix !== null && routePrefix !== undefined && routePrefix !== '') {\n        baseRoute = '/' + routePrefix + baseRoute;\n      }\n\n      // Create the templateUrl for a route to our resource that does the specified operation.\n      var templateUrl = function(operation) {\n        return baseUrl + '/' + resourceName.toLowerCase() +'-'+operation.toLowerCase()+'.tpl.html';\n      };\n      // Create the controller name for a route to our resource that does the specified operation.\n      var controllerName = function(operation) {\n        return resourceName + operation +'Ctrl';\n      };\n\n      // This is the object that our `routesFor()` function returns.  It decorates `$routeProvider`,\n      // delegating the `when()` and `otherwise()` functions but also exposing some new functions for\n      // creating CRUD routes.  Specifically we have `whenList(), `whenNew()` and `whenEdit()`.\n      var routeBuilder = {\n        // Create a route that will handle showing a list of items\n        whenList: function(resolveFns) {\n          routeBuilder.when(baseRoute, {\n            templateUrl: templateUrl('List'),\n            controller: controllerName('List'),\n            resolve: resolveFns\n          });\n          return routeBuilder;\n        },\n        // Create a route that will handle creating a new item\n        whenNew: function(resolveFns) {\n          routeBuilder.when(baseRoute +'/new', {\n            templateUrl: templateUrl('Edit'),\n            controller: controllerName('Edit'),\n            resolve: resolveFns\n          });\n          return routeBuilder;\n        },\n        // Create a route that will handle editing an existing item\n        whenEdit: function(resolveFns) {\n          routeBuilder.when(baseRoute+'/:itemId', {\n            templateUrl: templateUrl('Edit'),\n            controller: controllerName('Edit'),\n            resolve: resolveFns\n          });\n          return routeBuilder;\n        },\n        // Pass-through to `$routeProvider.when()`\n        when: function(path, route) {\n          $routeProvider.when(path, route);\n          return routeBuilder;\n        },\n        // Pass-through to `$routeProvider.otherwise()`\n        otherwise: function(params) {\n          $routeProvider.otherwise(params);\n          return routeBuilder;\n        },\n        // Access to the core $routeProvider.\n        $routeProvider: $routeProvider\n      };\n      return routeBuilder;\n    };\n  }\n  // Currently, v1.0.3, AngularJS does not provide annotation style dependencies in providers so,\n  // we add our injection dependencies using the $inject form\n  crudRouteProvider.$inject = ['$routeProvider'];\n\n  // Create our provider - it would be nice to be able to do something like this instead:\n  //\n  // ```\n  // angular.module('services.crudRouteProvider', [])\n  //   .configHelper('crudRouteProvider', ['$routeProvider, crudRouteProvider]);\n  // ```\n  // Then we could dispense with the $get, the $inject and the closure wrapper around all this.\n  angular.module('services.crudRouteProvider', ['ngRoute']).provider('crudRoute', crudRouteProvider);\n})();\n\nangular.module('services.exceptionHandler', ['services.i18nNotifications']);\n\nangular.module('services.exceptionHandler').factory('exceptionHandlerFactory', ['$injector', function($injector) {\n  return function($delegate) {\n\n    return function (exception, cause) {\n      // Lazy load notifications to get around circular dependency\n      //Circular dependency: $rootScope <- notifications <- i18nNotifications <- $exceptionHandler\n      var i18nNotifications = $injector.get('i18nNotifications');\n\n      // Pass through to original handler\n      $delegate(exception, cause);\n\n      // Push a notification error\n      i18nNotifications.pushForCurrentRoute('error.fatal', 'error', {}, {\n        exception:exception,\n        cause:cause\n      });\n    };\n  };\n}]);\n\nangular.module('services.exceptionHandler').config(['$provide', function($provide) {\n  $provide.decorator('$exceptionHandler', ['$delegate', 'exceptionHandlerFactory', function ($delegate, exceptionHandlerFactory) {\n    return exceptionHandlerFactory($delegate);\n  }]);\n}]);\n\nangular.module('services.httpRequestTracker', []);\nangular.module('services.httpRequestTracker').factory('httpRequestTracker', ['$http', function($http){\n\n  var httpRequestTracker = {};\n  httpRequestTracker.hasPendingRequests = function() {\n    return $http.pendingRequests.length > 0;\n  };\n\n  return httpRequestTracker;\n}]);\nangular.module('services.i18nNotifications', ['services.notifications', 'services.localizedMessages']);\nangular.module('services.i18nNotifications').factory('i18nNotifications', ['localizedMessages', 'notifications', function (localizedMessages, notifications) {\n\n  var prepareNotification = function(msgKey, type, interpolateParams, otherProperties) {\n     return angular.extend({\n       message: localizedMessages.get(msgKey, interpolateParams),\n       type: type\n     }, otherProperties);\n  };\n\n  var I18nNotifications = {\n    pushSticky:function (msgKey, type, interpolateParams, otherProperties) {\n      return notifications.pushSticky(prepareNotification(msgKey, type, interpolateParams, otherProperties));\n    },\n    pushForCurrentRoute:function (msgKey, type, interpolateParams, otherProperties) {\n      return notifications.pushForCurrentRoute(prepareNotification(msgKey, type, interpolateParams, otherProperties));\n    },\n    pushForNextRoute:function (msgKey, type, interpolateParams, otherProperties) {\n      return notifications.pushForNextRoute(prepareNotification(msgKey, type, interpolateParams, otherProperties));\n    },\n    getCurrent:function () {\n      return notifications.getCurrent();\n    },\n    remove:function (notification) {\n      return notifications.remove(notification);\n    }\n  };\n\n  return I18nNotifications;\n}]);\nangular.module('services.localizedMessages', []).factory('localizedMessages', ['$interpolate', 'I18N.MESSAGES', function ($interpolate, i18nmessages) {\n\n  var handleNotFound = function (msg, msgKey) {\n    return msg || '?' + msgKey + '?';\n  };\n\n  return {\n    get : function (msgKey, interpolateParams) {\n      var msg =  i18nmessages[msgKey];\n      if (msg) {\n        return $interpolate(msg)(interpolateParams);\n      } else {\n        return handleNotFound(msg, msgKey);\n      }\n    }\n  };\n}]);\nangular.module('services.notifications', []).factory('notifications', ['$rootScope', function ($rootScope) {\n\n  var notifications = {\n    'STICKY' : [],\n    'ROUTE_CURRENT' : [],\n    'ROUTE_NEXT' : []\n  };\n  var notificationsService = {};\n\n  var addNotification = function (notificationsArray, notificationObj) {\n    if (!angular.isObject(notificationObj)) {\n      throw new Error(\"Only object can be added to the notification service\");\n    }\n    notificationsArray.push(notificationObj);\n    return notificationObj;\n  };\n\n  $rootScope.$on('$routeChangeSuccess', function () {\n    notifications.ROUTE_CURRENT.length = 0;\n\n    notifications.ROUTE_CURRENT = angular.copy(notifications.ROUTE_NEXT);\n    notifications.ROUTE_NEXT.length = 0;\n  });\n\n  notificationsService.getCurrent = function(){\n    return [].concat(notifications.STICKY, notifications.ROUTE_CURRENT);\n  };\n\n  notificationsService.pushSticky = function(notification) {\n    return addNotification(notifications.STICKY, notification);\n  };\n\n  notificationsService.pushForCurrentRoute = function(notification) {\n    return addNotification(notifications.ROUTE_CURRENT, notification);\n  };\n\n  notificationsService.pushForNextRoute = function(notification) {\n    return addNotification(notifications.ROUTE_NEXT, notification);\n  };\n\n  notificationsService.remove = function(notification){\n    angular.forEach(notifications, function (notificationsByType) {\n      var idx = notificationsByType.indexOf(notification);\n      if (idx>-1){\n        notificationsByType.splice(idx,1);\n      }\n    });\n  };\n\n  notificationsService.removeAll = function(){\n    angular.forEach(notifications, function (notificationsByType) {\n      notificationsByType.length = 0;\n    });\n  };\n\n  return notificationsService;\n}]);\nangular.module('templates.app', ['admin/projects/projects-edit.tpl.html', 'admin/projects/projects-list.tpl.html', 'admin/users/users-edit.tpl.html', 'admin/users/users-list.tpl.html', 'dashboard/dashboard.tpl.html', 'header.tpl.html', 'notifications.tpl.html', 'projects/productbacklog/productbacklog-edit.tpl.html', 'projects/productbacklog/productbacklog-list.tpl.html', 'projects/projects-list.tpl.html', 'projects/sprints/sprints-edit.tpl.html', 'projects/sprints/sprints-list.tpl.html', 'projects/sprints/tasks/tasks-edit.tpl.html', 'projects/sprints/tasks/tasks-list.tpl.html', 'projectsinfo/list.tpl.html']);\n\nangular.module(\"admin/projects/projects-edit.tpl.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"admin/projects/projects-edit.tpl.html\",\n    \"<div class=\\\"well\\\">\\n\" +\n    \"    <form name=\\\"form\\\" crud-edit=\\\"project\\\">\\n\" +\n    \"        <legend>Project</legend>\\n\" +\n    \"        <div class=\\\"row-fluid\\\">\\n\" +\n    \"            <div class=\\\"span6\\\">\\n\" +\n    \"                <label>Name</label>\\n\" +\n    \"                <input type=\\\"text\\\" name=\\\"name\\\" ng-model=\\\"project.name\\\" class=\\\"span10\\\" required autofocus>\\n\" +\n    \"                <label>Description</label>\\n\" +\n    \"                <textarea rows=\\\"10\\\" cols=\\\"10\\\" ng-model=\\\"project.desc\\\" class=\\\"span10\\\">\\n\" +\n    \"                </textarea>\\n\" +\n    \"            </div>\\n\" +\n    \"            <div class=\\\"span6\\\" ng-controller=\\\"TeamMembersController\\\">\\n\" +\n    \"                <label>Product Owner</label>\\n\" +\n    \"                <select class=\\\"span12\\\" ng-model=\\\"project.productOwner\\\"\\n\" +\n    \"                        ng-options=\\\"user.$id() as user.getFullName() for user in productOwnerCandidates()\\\" required>\\n\" +\n    \"                    <option value=\\\"\\\">-- choose --</option>\\n\" +\n    \"                </select>\\n\" +\n    \"                <label>Scrum Master</label>\\n\" +\n    \"                <select class=\\\"span12\\\" ng-model=\\\"project.scrumMaster\\\"\\n\" +\n    \"                        ng-options=\\\"user.$id() as user.getFullName() for user in scrumMasterCandidates()\\\" required>\\n\" +\n    \"                    <option value=\\\"\\\">-- choose --</option>\\n\" +\n    \"                </select>\\n\" +\n    \"                <label>Development Team</label>\\n\" +\n    \"                <table class=\\\"table table-bordered table-condensed table-striped table-hover\\\">\\n\" +\n    \"                    <thead>\\n\" +\n    \"                    <tr>\\n\" +\n    \"                        <th>User</th>\\n\" +\n    \"                        <th>&nbsp;</th>\\n\" +\n    \"                    </tr>\\n\" +\n    \"                    </thead>\\n\" +\n    \"                    <tbody>\\n\" +\n    \"                    <tr ng-repeat=\\\"userId in project.teamMembers\\\">\\n\" +\n    \"                        <td>{{usersLookup[userId].getFullName()}}</td>\\n\" +\n    \"                        <td>\\n\" +\n    \"                            <button class=\\\"btn btn-small\\\" ng-click=\\\"removeTeamMember(userId)\\\">Remove</button>\\n\" +\n    \"                        </td>\\n\" +\n    \"                    </tr>\\n\" +\n    \"                    <tr>\\n\" +\n    \"                        <td><select class=\\\"span6\\\" ng-model=\\\"selTeamMember\\\"\\n\" +\n    \"                                    ng-options=\\\"user.$id() as user.getFullName() for user in teamMemberCandidates()\\\"></select>\\n\" +\n    \"                        </td>\\n\" +\n    \"                        <td>\\n\" +\n    \"                            <button class=\\\"btn btn-small\\\" ng-click=\\\"addTeamMember(selTeamMember)\\\" ng-disabled=\\\"!selTeamMember\\\">Add\\n\" +\n    \"                            </button>\\n\" +\n    \"                        </td>\\n\" +\n    \"                    </tr>\\n\" +\n    \"                    </tbody>\\n\" +\n    \"                </table>\\n\" +\n    \"            </div>\\n\" +\n    \"        </div>\\n\" +\n    \"        <div class=\\\"row-fluid\\\">\\n\" +\n    \"            <hr>\\n\" +\n    \"            <crud-buttons class=\\\"span12\\\"></crud-buttons>\\n\" +\n    \"        </div>\\n\" +\n    \"    </form>\\n\" +\n    \"</div>\");\n}]);\n\nangular.module(\"admin/projects/projects-list.tpl.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"admin/projects/projects-list.tpl.html\",\n    \"<table class=\\\"table table-bordered table-condensed table-striped table-hover\\\">\\n\" +\n    \"    <thead>\\n\" +\n    \"    <tr>\\n\" +\n    \"        <th>Name</th>\\n\" +\n    \"        <th>Description</th>\\n\" +\n    \"    </tr>\\n\" +\n    \"    </thead>\\n\" +\n    \"    <tbody>\\n\" +\n    \"    <tr ng-repeat=\\\"project in projects\\\" ng-click=\\\"edit(project.$id())\\\">\\n\" +\n    \"        <td>{{project.name}}</td>\\n\" +\n    \"        <td>{{project.desc}}</td>\\n\" +\n    \"    </tr>\\n\" +\n    \"    </tbody>\\n\" +\n    \"</table>\\n\" +\n    \"<div class=\\\"well\\\">\\n\" +\n    \"    <button class=\\\"btn\\\" ng-click=\\\"new()\\\">New Project</button>\\n\" +\n    \"</div>\\n\" +\n    \"\");\n}]);\n\nangular.module(\"admin/users/users-edit.tpl.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"admin/users/users-edit.tpl.html\",\n    \"<div class=\\\"well\\\">\\n\" +\n    \"    <form name=\\\"form\\\" novalidate crud-edit=\\\"user\\\">\\n\" +\n    \"        <legend>User</legend>\\n\" +\n    \"        <gravatar email=\\\"user.email\\\" size=\\\"200\\\" class=\\\"img-polaroid pull-right\\\"></gravatar>\\n\" +\n    \"        <label for=\\\"email\\\">E-mail</label>\\n\" +\n    \"        <input class=\\\"span6\\\" type=\\\"email\\\" id=\\\"email\\\" name=\\\"email\\\" ng-model=\\\"user.email\\\" required unique-email>\\n\" +\n    \"        <span ng-show=\\\"showError('email', 'required')\\\" class=\\\"help-inline\\\">This field is required.</span>\\n\" +\n    \"        <span ng-show=\\\"showError('email', 'email')\\\" class=\\\"help-inline\\\">Please enter a valid email address.</span>\\n\" +\n    \"        <span ng-show=\\\"showError('email', 'uniqueEmail')\\\" class=\\\"help-inline\\\">This email address is not available - please enter another.</span>\\n\" +\n    \"        <label for=\\\"lastName\\\">Last name</label>\\n\" +\n    \"        <input class=\\\"span6\\\" type=\\\"text\\\" id=\\\"lastName\\\" name=\\\"lastName\\\" ng-model=\\\"user.lastName\\\" required>\\n\" +\n    \"        <span ng-show=\\\"showError('lastName', 'required')\\\" class=\\\"help-inline\\\">This field is required.</span>\\n\" +\n    \"        <label for=\\\"firstName\\\">First name</label>\\n\" +\n    \"        <input class=\\\"span6\\\" type=\\\"text\\\" id=\\\"firstName\\\" name=\\\"firstName\\\" ng-model=\\\"user.firstName\\\" required>\\n\" +\n    \"        <span ng-show=\\\"showError('firstName', 'required')\\\" class=\\\"help-inline\\\">This field is required.</span>\\n\" +\n    \"        <label for=\\\"password\\\">Password</label>\\n\" +\n    \"        <input class=\\\"span6\\\" type=\\\"password\\\" id=\\\"password\\\" name=\\\"password\\\" ng-model=\\\"user.password\\\" required>\\n\" +\n    \"        <span ng-show=\\\"showError('password', 'required')\\\" class=\\\"help-inline\\\">This field is required.</span>\\n\" +\n    \"        <span ng-show=\\\"showError('passwordRepeat', 'equal')\\\" class=\\\"help-inline\\\">Passwords do not match.</span>\\n\" +\n    \"        <label for=\\\"passwordRepeat\\\">Password (repeat)</label>\\n\" +\n    \"        <input class=\\\"span6\\\" type=\\\"password\\\" id=\\\"passwordRepeat\\\" name=\\\"passwordRepeat\\\" ng-model=\\\"password\\\" required validate-equals=\\\"user.password\\\">\\n\" +\n    \"        <span ng-show=\\\"showError('passwordRepeat', 'required')\\\" class=\\\"help-inline\\\">This field is required.</span>\\n\" +\n    \"        <span ng-show=\\\"showError('passwordRepeat', 'equal')\\\" class=\\\"help-inline\\\">Passwords do not match.</span>\\n\" +\n    \"        <label>Admin</label>\\n\" +\n    \"        <input type=\\\"checkbox\\\" ng-model=\\\"user.admin\\\">\\n\" +\n    \"        <hr>\\n\" +\n    \"        <crud-buttons></crud-buttons>\\n\" +\n    \"    </form>\\n\" +\n    \"</div>\");\n}]);\n\nangular.module(\"admin/users/users-list.tpl.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"admin/users/users-list.tpl.html\",\n    \"<table class=\\\"table table-bordered table-condensed table-striped table-hover\\\">\\n\" +\n    \"    <thead>\\n\" +\n    \"    <tr>\\n\" +\n    \"        <th></th>\\n\" +\n    \"        <th>E-mail</th>\\n\" +\n    \"        <th>Last name</th>\\n\" +\n    \"        <th>First name</th>\\n\" +\n    \"    </tr>\\n\" +\n    \"    </thead>\\n\" +\n    \"    <tbody>\\n\" +\n    \"    <tr ng-repeat=\\\"user in users\\\" ng-click=\\\"edit(user.$id())\\\">\\n\" +\n    \"        <td><gravatar email=\\\"user.email\\\" size=\\\"50\\\" default-image=\\\"'monsterid'\\\"></gravatar></td>\\n\" +\n    \"        <td>{{user.email}}</td>\\n\" +\n    \"        <td>{{user.lastName}}</td>\\n\" +\n    \"        <td>{{user.firstName}}</td>\\n\" +\n    \"        <td><button class=\\\"btn btn-danger remove\\\" ng-click=\\\"remove(user, $index, $event)\\\">Remove</button></td>\\n\" +\n    \"    </tr>\\n\" +\n    \"    </tbody>\\n\" +\n    \"</table>\\n\" +\n    \"<div class=\\\"well\\\">\\n\" +\n    \"    <button class=\\\"btn\\\" ng-click=\\\"new()\\\">New User</button>\\n\" +\n    \"</div>\\n\" +\n    \"\");\n}]);\n\nangular.module(\"dashboard/dashboard.tpl.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"dashboard/dashboard.tpl.html\",\n    \"<h4>My projects</h4>\\n\" +\n    \"<div ng-include=\\\"'projects/projects-list.tpl.html'\\\">\\n\" +\n    \"</div>\\n\" +\n    \"\\n\" +\n    \"<h4>My tasks</h4>\\n\" +\n    \"<table class=\\\"table table-bordered table-condensed table-striped table-hover\\\">\\n\" +\n    \"    <thead>\\n\" +\n    \"    <tr>\\n\" +\n    \"        <th class=\\\"span8\\\">Name</th>\\n\" +\n    \"        <th class=\\\"span1\\\">Estimation</th>\\n\" +\n    \"        <th class=\\\"span1\\\">Remaining</th>\\n\" +\n    \"        <th class=\\\"span2\\\">Tools</th>\\n\" +\n    \"    </tr>\\n\" +\n    \"    </thead>\\n\" +\n    \"    <tbody>\\n\" +\n    \"    <tr ng-repeat=\\\"task in tasks\\\">\\n\" +\n    \"        <td>{{task.name}}</td>\\n\" +\n    \"        <td>{{task.estimation}}</td>\\n\" +\n    \"        <td>{{task.remaining}}</td>\\n\" +\n    \"        <td></td>\\n\" +\n    \"    </tr>\\n\" +\n    \"    <tr ng-show=\\\"!tasks.length\\\">\\n\" +\n    \"        <td colspan=\\\"4\\\">No tasks for you!</td>\\n\" +\n    \"    </tr>\\n\" +\n    \"    </tbody>\\n\" +\n    \"</table>\");\n}]);\n\nangular.module(\"header.tpl.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"header.tpl.html\",\n    \"<div class=\\\"navbar\\\" ng-controller=\\\"HeaderCtrl\\\">\\n\" +\n    \"    <div class=\\\"navbar-inner\\\">\\n\" +\n    \"        <a class=\\\"brand\\\" ng-click=\\\"home()\\\">AScrum</a>\\n\" +\n    \"        <ul class=\\\"nav\\\">\\n\" +\n    \"            <li ng-class=\\\"{active:isNavbarActive('projectsinfo')}\\\"><a href=\\\"/projectsinfo\\\">Current Projects</a></li>\\n\" +\n    \"        </ul>\\n\" +\n    \"\\n\" +\n    \"        <ul class=\\\"nav\\\" ng-show=\\\"isAuthenticated()\\\">\\n\" +\n    \"            <li ng-class=\\\"{active:isNavbarActive('projects')}\\\"><a href=\\\"/projects\\\">My Projects</a></li>\\n\" +\n    \"            <li class=\\\"dropdown\\\" ng-class=\\\"{active:isNavbarActive('admin'), open:isAdminOpen}\\\" ng-show=\\\"isAdmin()\\\">\\n\" +\n    \"                <a id=\\\"adminmenu\\\" role=\\\"button\\\" class=\\\"dropdown-toggle\\\" ng-click=\\\"isAdminOpen=!isAdminOpen\\\">Admin<b class=\\\"caret\\\"></b></a>\\n\" +\n    \"                <ul class=\\\"dropdown-menu\\\" role=\\\"menu\\\" aria-labelledby=\\\"adminmenu\\\">\\n\" +\n    \"                    <li><a tabindex=\\\"-1\\\" href=\\\"/admin/projects\\\" ng-click=\\\"isAdminOpen=false\\\">Manage Projects</a></li>\\n\" +\n    \"                    <li><a tabindex=\\\"-1\\\" href=\\\"/admin/users\\\" ng-click=\\\"isAdminOpen=false\\\">Manage Users</a></li>\\n\" +\n    \"                </ul>\\n\" +\n    \"            </li>\\n\" +\n    \"        </ul>\\n\" +\n    \"        <ul class=\\\"nav pull-right\\\" ng-show=\\\"hasPendingRequests()\\\">\\n\" +\n    \"            <li class=\\\"divider-vertical\\\"></li>\\n\" +\n    \"            <li><a href=\\\"#\\\"><img src=\\\"/static/img/spinner.gif\\\"></a></li>\\n\" +\n    \"        </ul>\\n\" +\n    \"        <login-toolbar></login-toolbar>\\n\" +\n    \"    </div>\\n\" +\n    \"    <div>\\n\" +\n    \"        <ul class=\\\"breadcrumb\\\">\\n\" +\n    \"            <li ng-repeat=\\\"breadcrumb in breadcrumbs.getAll()\\\">\\n\" +\n    \"                <span class=\\\"divider\\\">/</span>\\n\" +\n    \"                <ng-switch on=\\\"$last\\\">\\n\" +\n    \"                    <span ng-switch-when=\\\"true\\\">{{breadcrumb.name}}</span>\\n\" +\n    \"                    <span ng-switch-default><a href=\\\"{{breadcrumb.path}}\\\">{{breadcrumb.name}}</a></span>\\n\" +\n    \"                </ng-switch>\\n\" +\n    \"            </li>\\n\" +\n    \"        </ul>\\n\" +\n    \"    </div>\\n\" +\n    \"</div>\");\n}]);\n\nangular.module(\"notifications.tpl.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"notifications.tpl.html\",\n    \"<div ng-class=\\\"['alert', 'alert-'+notification.type]\\\" ng-repeat=\\\"notification in notifications.getCurrent()\\\">\\n\" +\n    \"    <button class=\\\"close\\\" ng-click=\\\"removeNotification(notification)\\\">x</button>\\n\" +\n    \"    {{notification.message}}\\n\" +\n    \"</div>\\n\" +\n    \"\");\n}]);\n\nangular.module(\"projects/productbacklog/productbacklog-edit.tpl.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"projects/productbacklog/productbacklog-edit.tpl.html\",\n    \"<div class=\\\"well\\\">\\n\" +\n    \"    <h4>Product backlog item</h4>\\n\" +\n    \"    <hr>\\n\" +\n    \"    <form name=\\\"form\\\" crud-edit=\\\"backlogItem\\\">\\n\" +\n    \"        <label>Name</label>\\n\" +\n    \"        <input type=\\\"text\\\" name=\\\"name\\\" ng-model=\\\"backlogItem.name\\\" class=\\\"span10\\\" required autofocus>\\n\" +\n    \"        <label>User story</label>\\n\" +\n    \"        <textarea rows=\\\"8\\\" cols=\\\"10\\\" ng-model=\\\"backlogItem.desc\\\" class=\\\"span10\\\" required>\\n\" +\n    \"        </textarea>\\n\" +\n    \"        <label>Priority</label>\\n\" +\n    \"        <input type=\\\"number\\\" ng-model=\\\"backlogItem.priority\\\" required>\\n\" +\n    \"        <label>Estimation</label>\\n\" +\n    \"        <input type=\\\"number\\\" ng-model=\\\"backlogItem.estimation\\\" required>\\n\" +\n    \"        <hr>\\n\" +\n    \"        <crud-buttons></crud-buttons>\\n\" +\n    \"    </form>\\n\" +\n    \"</div>\");\n}]);\n\nangular.module(\"projects/productbacklog/productbacklog-list.tpl.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"projects/productbacklog/productbacklog-list.tpl.html\",\n    \"<table class=\\\"table table-bordered table-condensed table-striped table-hover\\\">\\n\" +\n    \"    <thead>\\n\" +\n    \"    <tr>\\n\" +\n    \"        <th>Name</th>\\n\" +\n    \"        <th>Description</th>\\n\" +\n    \"        <th>Priority</th>\\n\" +\n    \"        <th>Estimation</th>\\n\" +\n    \"    </tr>\\n\" +\n    \"    </thead>\\n\" +\n    \"    <tbody>\\n\" +\n    \"    <tr ng-repeat=\\\"backlogItem in backlog\\\" ng-click=\\\"edit(backlogItem.$id())\\\">\\n\" +\n    \"        <td>{{backlogItem.name}}</td>\\n\" +\n    \"        <td>{{backlogItem.desc}}</td>\\n\" +\n    \"        <td>{{backlogItem.priority}}</td>\\n\" +\n    \"        <td>{{backlogItem.estimation}}</td>\\n\" +\n    \"    </tr>\\n\" +\n    \"    <tr ng-show=\\\"!backlog.length\\\">\\n\" +\n    \"        <td colspan=\\\"4\\\">No items in the backlog</td>\\n\" +\n    \"    </tr>\\n\" +\n    \"    </tbody>\\n\" +\n    \"</table>\\n\" +\n    \"<div class=\\\"well\\\">\\n\" +\n    \"    <button class=\\\"btn\\\" ng-click=\\\"new()\\\">New backlog item</button>\\n\" +\n    \"</div>\");\n}]);\n\nangular.module(\"projects/projects-list.tpl.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"projects/projects-list.tpl.html\",\n    \"<table class=\\\"table table-bordered table-condensed table-striped table-hover\\\">\\n\" +\n    \"    <thead>\\n\" +\n    \"    <tr>\\n\" +\n    \"        <th class=\\\"span3\\\">Name</th>\\n\" +\n    \"        <th class=\\\"span5\\\">Description</th>\\n\" +\n    \"        <th class=\\\"span2\\\">My Role(s)</th>\\n\" +\n    \"        <th class=\\\"span2\\\">Tools</th>\\n\" +\n    \"    </tr>\\n\" +\n    \"    </thead>\\n\" +\n    \"    <tbody>\\n\" +\n    \"    <tr ng-repeat=\\\"project in projects\\\">\\n\" +\n    \"        <td ng-click=\\\"manageBacklog(project.$id())\\\">{{project.name}}</td>\\n\" +\n    \"        <td ng-click=\\\"manageBacklog(project.$id())\\\">{{project.desc}}</td>\\n\" +\n    \"        <td>\\n\" +\n    \"            {{project.getRoles(authService.currentUser.id)}}\\n\" +\n    \"        </td>\\n\" +\n    \"        <td>\\n\" +\n    \"            <a ng-click=\\\"manageBacklog(project.$id())\\\">Product backlog</a>\\n\" +\n    \"            <a ng-click=\\\"manageSprints(project.$id())\\\">Sprints</a>\\n\" +\n    \"        </td>\\n\" +\n    \"    </tr>\\n\" +\n    \"    </tbody>\\n\" +\n    \"</table>\");\n}]);\n\nangular.module(\"projects/sprints/sprints-edit.tpl.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"projects/sprints/sprints-edit.tpl.html\",\n    \"<div class=\\\"well\\\">\\n\" +\n    \"    <h4>Sprint</h4>\\n\" +\n    \"    <hr>\\n\" +\n    \"    <form name=\\\"form\\\" crud-edit=\\\"sprint\\\">\\n\" +\n    \"        <div class=\\\"row-fluid\\\">\\n\" +\n    \"            <div class=\\\"span6\\\">\\n\" +\n    \"                <label>Name</label>\\n\" +\n    \"                <input type=\\\"text\\\" name=\\\"name\\\" ng-model=\\\"sprint.name\\\" class=\\\"span10\\\" required autofocus>\\n\" +\n    \"                <label>Capacity</label>\\n\" +\n    \"                <input type=\\\"number\\\" name=\\\"description\\\" ng-model=\\\"sprint.capacity\\\" class=\\\"span5\\\" required>\\n\" +\n    \"            </div>\\n\" +\n    \"            <div class=\\\"span6\\\">\\n\" +\n    \"                <label>Start date</label>\\n\" +\n    \"                <input type=\\\"text\\\" name=\\\"name\\\" ng-model=\\\"sprint.start\\\" class=\\\"span5\\\" required>\\n\" +\n    \"                <label>End date</label>\\n\" +\n    \"                <input type=\\\"text\\\" name=\\\"name\\\" ng-model=\\\"sprint.end\\\" class=\\\"span5\\\" required>\\n\" +\n    \"            </div>\\n\" +\n    \"        </div>\\n\" +\n    \"        <hr>\\n\" +\n    \"        <h4>Sprint backlog</h4>\\n\" +\n    \"        <hr>\\n\" +\n    \"        <div class=\\\"row-fluid\\\">\\n\" +\n    \"            <div class=\\\"span6\\\">\\n\" +\n    \"                <label>Currently in the sprint's backlog</label>\\n\" +\n    \"                <table class=\\\"table table-bordered table-condensed table-striped table-hover\\\">\\n\" +\n    \"                    <thead>\\n\" +\n    \"                    <tr>\\n\" +\n    \"                        <th class=\\\"span8\\\">Name</th>\\n\" +\n    \"                        <th class=\\\"span2\\\">Estimation</th>\\n\" +\n    \"                        <th class=\\\"span2\\\">Tools</th>\\n\" +\n    \"                    </tr>\\n\" +\n    \"                    </thead>\\n\" +\n    \"                    <tbody>\\n\" +\n    \"                    <tr ng-repeat=\\\"sprintBacklogItem in sprint.sprintBacklog\\\">\\n\" +\n    \"                        <td><a ng-click=\\\"viewProductBacklogItem(sprintBacklogItem)\\\">{{productBacklogLookup[sprintBacklogItem].name}}</a>\\n\" +\n    \"                        </td>\\n\" +\n    \"                        <td>{{productBacklogLookup[sprintBacklogItem].estimation}}</td>\\n\" +\n    \"                        <td>\\n\" +\n    \"                            <button class=\\\"btn btn-mini btn-danger\\\" ng-click=\\\"removeBacklogItem(sprintBacklogItem)\\\">\\n\" +\n    \"                                Remove\\n\" +\n    \"                            </button>\\n\" +\n    \"                        </td>\\n\" +\n    \"                    </tr>\\n\" +\n    \"                    </tbody>\\n\" +\n    \"                    <tfoot>\\n\" +\n    \"                    <tr>\\n\" +\n    \"                        <td>Estimation in total</td>\\n\" +\n    \"                        <td>{{estimationInTotal()}}</td>\\n\" +\n    \"                        <td>-</td>\\n\" +\n    \"                    </tr>\\n\" +\n    \"                    </tfoot>\\n\" +\n    \"                </table>\\n\" +\n    \"            </div>\\n\" +\n    \"            <div class=\\\"span6\\\">\\n\" +\n    \"                <label>Product backlog</label>\\n\" +\n    \"                <table class=\\\"table table-bordered table-condensed table-striped table-hover\\\">\\n\" +\n    \"                    <thead>\\n\" +\n    \"                    <tr>\\n\" +\n    \"                        <th class=\\\"span8\\\">Name</th>\\n\" +\n    \"                        <th class=\\\"span2\\\">Estimation</th>\\n\" +\n    \"                        <th class=\\\"span2\\\">Tools</th>\\n\" +\n    \"                    </tr>\\n\" +\n    \"                    </thead>\\n\" +\n    \"                    <tbody>\\n\" +\n    \"                    <tr ng-repeat=\\\"productBacklogItem in productBacklog | filter:notSelected\\\">\\n\" +\n    \"                        <td>\\n\" +\n    \"                            <a ng-click=\\\"viewProductBacklogItem(productBacklogItem.$id())\\\">{{productBacklogItem.name}}</a>\\n\" +\n    \"                        </td>\\n\" +\n    \"                        <td>{{productBacklogItem.estimation}}</td>\\n\" +\n    \"                        <td>\\n\" +\n    \"                            <button class=\\\"btn btn-mini\\\" ng-click=\\\"addBacklogItem(productBacklogItem)\\\">Add to sprint\\n\" +\n    \"                            </button>\\n\" +\n    \"                        </td>\\n\" +\n    \"                    </tr>\\n\" +\n    \"                    </tbody>\\n\" +\n    \"                </table>\\n\" +\n    \"            </div>\\n\" +\n    \"        </div>\\n\" +\n    \"        <hr>\\n\" +\n    \"        <div>\\n\" +\n    \"            <crud-buttons></crud-buttons>\\n\" +\n    \"        </div>\\n\" +\n    \"    </form>\\n\" +\n    \"</div>\");\n}]);\n\nangular.module(\"projects/sprints/sprints-list.tpl.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"projects/sprints/sprints-list.tpl.html\",\n    \"<table class=\\\"table table-bordered table-condensed table-striped table-hover\\\">\\n\" +\n    \"    <thead>\\n\" +\n    \"    <tr>\\n\" +\n    \"        <th>Name</th>\\n\" +\n    \"        <th>Start date</th>\\n\" +\n    \"        <th>End date</th>\\n\" +\n    \"        <th>Status</th>\\n\" +\n    \"        <th>Tools</th>\\n\" +\n    \"    </tr>\\n\" +\n    \"    </thead>\\n\" +\n    \"    <tbody>\\n\" +\n    \"    <tr ng-repeat=\\\"sprint in sprints\\\">\\n\" +\n    \"        <td ng-click=\\\"edit(sprint.$id())\\\">{{sprint.name}}</td>\\n\" +\n    \"        <td ng-click=\\\"edit(sprint.$id())\\\">{{sprint.start}}</td>\\n\" +\n    \"        <td ng-click=\\\"edit(sprint.$id())\\\">{{sprint.end}}</td>\\n\" +\n    \"        <td ng-click=\\\"edit(sprint.$id())\\\">ACTIVE</td>\\n\" +\n    \"        <td>\\n\" +\n    \"            <button type=\\\"button\\\" class=\\\"btn btn-mini\\\" ng-click=\\\"tasks(sprint)\\\">Tasks</button>\\n\" +\n    \"        </td>\\n\" +\n    \"    </tr>\\n\" +\n    \"    <tr ng-show=\\\"!sprints.length\\\">\\n\" +\n    \"        <td colspan=\\\"5\\\">No sprints defined</td>\\n\" +\n    \"    </tr>\\n\" +\n    \"    </tbody>\\n\" +\n    \"</table>\\n\" +\n    \"<div class=\\\"well\\\">\\n\" +\n    \"    <button class=\\\"btn\\\" ng-click=\\\"new()\\\">New sprint</button>\\n\" +\n    \"</div>\");\n}]);\n\nangular.module(\"projects/sprints/tasks/tasks-edit.tpl.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"projects/sprints/tasks/tasks-edit.tpl.html\",\n    \"<div class=\\\"well\\\">\\n\" +\n    \"    <div class=\\\"row-fluid\\\">\\n\" +\n    \"        <form name=\\\"form\\\" crud-edit=\\\"task\\\">\\n\" +\n    \"            <div class=\\\"span6\\\">\\n\" +\n    \"                <label>Name</label>\\n\" +\n    \"                <input type=\\\"text\\\" name=\\\"name\\\" ng-model=\\\"task.name\\\" class=\\\"span10\\\" required autofocus>\\n\" +\n    \"                <label>Product Backlog item</label>\\n\" +\n    \"                <select name=\\\"productBacklog\\\" class=\\\"span10\\\" ng-model=\\\"task.productBacklogItemId\\\" ng-options=\\\"backlogItem.$id() as backlogItem.name for backlogItem in sprintBacklogItems\\\" required></select>\\n\" +\n    \"                <label>Description</label>\\n\" +\n    \"                <textarea rows=\\\"8\\\" cols=\\\"10\\\" ng-model=\\\"task.desc\\\" class=\\\"span10\\\" required>\\n\" +\n    \"                </textarea>\\n\" +\n    \"            </div>\\n\" +\n    \"            <div class=\\\"span6\\\">\\n\" +\n    \"                <label>Estimation</label>\\n\" +\n    \"                <input type=\\\"number\\\" name=\\\"estimation\\\" ng-model=\\\"task.estimation\\\" class=\\\"span5\\\" required>\\n\" +\n    \"                <label>Remaining</label>\\n\" +\n    \"                <input type=\\\"number\\\" name=\\\"remaining\\\" ng-model=\\\"task.remaining\\\" class=\\\"span5\\\" required>\\n\" +\n    \"                <label>State</label>\\n\" +\n    \"                <select name=\\\"state\\\" ng-model=\\\"task.state\\\" class=\\\"span5\\\" required ng-options=\\\"state for state in statesEnum\\\"></select>\\n\" +\n    \"                <label>Assigned to</label>\\n\" +\n    \"                <select name=\\\"state\\\" ng-model=\\\"task.assignedUserId\\\" class=\\\"span10\\\" ng-options=\\\"teamMember.$id() as teamMember.getFullName() for teamMember in teamMembers\\\"></select>\\n\" +\n    \"            </div>\\n\" +\n    \"        </form>\\n\" +\n    \"    </div>\\n\" +\n    \"    <hr>\\n\" +\n    \"    <crud-buttons></crud-buttons>\\n\" +\n    \"</div>\");\n}]);\n\nangular.module(\"projects/sprints/tasks/tasks-list.tpl.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"projects/sprints/tasks/tasks-list.tpl.html\",\n    \"<table class=\\\"table table-bordered table-condensed table-striped table-hover\\\">\\n\" +\n    \"    <thead>\\n\" +\n    \"    <tr>\\n\" +\n    \"        <th class=\\\"span8\\\">Name</th>\\n\" +\n    \"        <th class=\\\"span1\\\">Estimation</th>\\n\" +\n    \"        <th class=\\\"span1\\\">Remaining</th>\\n\" +\n    \"        <th class=\\\"span2\\\">Tools</th>\\n\" +\n    \"    </tr>\\n\" +\n    \"    </thead>\\n\" +\n    \"    <tbody>\\n\" +\n    \"    <tr ng-repeat=\\\"task in tasks\\\">\\n\" +\n    \"        <td ng-click=\\\"edit(task.$id())\\\">{{task.name}}</td>\\n\" +\n    \"        <td>{{task.estimation}}</td>\\n\" +\n    \"        <td>{{task.remaining}}</td>\\n\" +\n    \"        <td></td>\\n\" +\n    \"    </tr>\\n\" +\n    \"    <tr ng-show=\\\"!tasks.length\\\">\\n\" +\n    \"        <td colspan=\\\"4\\\">No tasks defined for this sprint</td>\\n\" +\n    \"    </tr>\\n\" +\n    \"    </tbody>\\n\" +\n    \"</table>\\n\" +\n    \"<div class=\\\"well\\\">\\n\" +\n    \"    <button class=\\\"btn\\\" ng-click=\\\"new()\\\">New task</button>\\n\" +\n    \"</div>\");\n}]);\n\nangular.module(\"projectsinfo/list.tpl.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"projectsinfo/list.tpl.html\",\n    \"<h3>Projects info</h3>\");\n}]);\n\nangular.module('templates.common', ['security/login/form.tpl.html', 'security/login/toolbar.tpl.html']);\n\nangular.module(\"security/login/form.tpl.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"security/login/form.tpl.html\",\n    \"<form name=\\\"form\\\" novalidate class=\\\"login-form\\\">\\n\" +\n    \"    <div class=\\\"modal-header\\\">\\n\" +\n    \"        <h4>Sign in</h4>\\n\" +\n    \"    </div>\\n\" +\n    \"    <div class=\\\"modal-body\\\">\\n\" +\n    \"        <div class=\\\"alert alert-warning\\\" ng-show=\\\"authReason\\\">\\n\" +\n    \"            {{authReason}}\\n\" +\n    \"        </div>\\n\" +\n    \"        <div class=\\\"alert alert-error\\\" ng-show=\\\"authError\\\">\\n\" +\n    \"            {{authError}}\\n\" +\n    \"        </div>\\n\" +\n    \"        <div class=\\\"alert alert-info\\\">Please enter your login details</div>\\n\" +\n    \"        <label>E-mail</label>\\n\" +\n    \"        <input name=\\\"login\\\" type=\\\"email\\\" ng-model=\\\"user.email\\\" required autofocus>\\n\" +\n    \"        <label>Password</label>\\n\" +\n    \"        <input name=\\\"pass\\\" type=\\\"password\\\" ng-model=\\\"user.password\\\" required>\\n\" +\n    \"    </div>\\n\" +\n    \"    <div class=\\\"modal-footer\\\">\\n\" +\n    \"        <button class=\\\"btn btn-primary login\\\" ng-click=\\\"login()\\\" ng-disabled='form.$invalid'>Sign in</button>\\n\" +\n    \"        <button class=\\\"btn clear\\\" ng-click=\\\"clearForm()\\\">Clear</button>\\n\" +\n    \"        <button class=\\\"btn btn-warning cancel\\\" ng-click=\\\"cancelLogin()\\\">Cancel</button>\\n\" +\n    \"    </div>\\n\" +\n    \"</form>\\n\" +\n    \"\");\n}]);\n\nangular.module(\"security/login/toolbar.tpl.html\", []).run([\"$templateCache\", function($templateCache) {\n  $templateCache.put(\"security/login/toolbar.tpl.html\",\n    \"<ul class=\\\"nav pull-right\\\">\\n\" +\n    \"  <li class=\\\"divider-vertical\\\"></li>\\n\" +\n    \"  <li ng-show=\\\"isAuthenticated()\\\">\\n\" +\n    \"      <a href=\\\"#\\\">{{currentUser.firstName}} {{currentUser.lastName}}</a>\\n\" +\n    \"  </li>\\n\" +\n    \"  <li ng-show=\\\"isAuthenticated()\\\" class=\\\"logout\\\">\\n\" +\n    \"      <form class=\\\"navbar-form\\\">\\n\" +\n    \"          <button class=\\\"btn logout\\\" ng-click=\\\"logout()\\\">Log out</button>\\n\" +\n    \"      </form>\\n\" +\n    \"  </li>\\n\" +\n    \"  <li ng-hide=\\\"isAuthenticated()\\\" class=\\\"login\\\">\\n\" +\n    \"      <form class=\\\"navbar-form\\\">\\n\" +\n    \"          <button class=\\\"btn login\\\" ng-click=\\\"login()\\\">Log in</button>\\n\" +\n    \"      </form>\\n\" +\n    \"  </li>\\n\" +\n    \"</ul>\");\n}]);\n"]],"start1":0,"start2":0,"length1":0,"length2":91823}]],"length":91823}
